[
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12321",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12321/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12321/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12321/events",
    "html_url": "https://github.com/facebook/react/issues/12321",
    "id": 301793572,
    "number": 12321,
    "title": "React crashing with no error when using a component inside itself recursively",
    "user": {
      "login": "haikyuu",
      "id": 8558836,
      "avatar_url": "https://avatars1.githubusercontent.com/u/8558836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haikyuu",
      "html_url": "https://github.com/haikyuu",
      "followers_url": "https://api.github.com/users/haikyuu/followers",
      "following_url": "https://api.github.com/users/haikyuu/following{/other_user}",
      "gists_url": "https://api.github.com/users/haikyuu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haikyuu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haikyuu/subscriptions",
      "organizations_url": "https://api.github.com/users/haikyuu/orgs",
      "repos_url": "https://api.github.com/users/haikyuu/repos",
      "events_url": "https://api.github.com/users/haikyuu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haikyuu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-03-02T14:57:58Z",
    "updated_at": "2018-03-04T03:03:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nReact should throw an error/warning when using a component inside itself (recursively)\r\nI know this is an edge case, but nevertheless. I was mistakenly caught in it\r\n```JavaScript\r\nimport React from \"react\";\r\nimport Hello, { Bug } from \"./Hello\";\r\n\r\nexport default ({ me }) => (me ? <Bug me /> : <Hello />);\r\n```\r\nUsing a component inside itself breaks\r\n**Waring**: this will crash ⚠️ your browser tab https://codesandbox.io/s/vy5ky3zwm5\r\nHere is one that **will not**: https://codesandbox.io/s/l2q2415879\r\nIn order to reproduce: just un-comment `Bug` component\r\n**What is the expected behavior?**\r\nNot sure, but an error would be good if possible\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12311",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12311/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12311/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12311/events",
    "html_url": "https://github.com/facebook/react/pull/12311",
    "id": 301252735,
    "number": 12311,
    "title": "Update ReactART.js",
    "user": {
      "login": "brainee",
      "id": 5361813,
      "avatar_url": "https://avatars0.githubusercontent.com/u/5361813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brainee",
      "html_url": "https://github.com/brainee",
      "followers_url": "https://api.github.com/users/brainee/followers",
      "following_url": "https://api.github.com/users/brainee/following{/other_user}",
      "gists_url": "https://api.github.com/users/brainee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brainee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brainee/subscriptions",
      "organizations_url": "https://api.github.com/users/brainee/orgs",
      "repos_url": "https://api.github.com/users/brainee/repos",
      "events_url": "https://api.github.com/users/brainee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brainee/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-03-01T02:08:34Z",
    "updated_at": "2018-03-01T02:19:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12311",
      "html_url": "https://github.com/facebook/react/pull/12311",
      "diff_url": "https://github.com/facebook/react/pull/12311.diff",
      "patch_url": "https://github.com/facebook/react/pull/12311.patch"
    },
    "body": "cancelDeferredCallback wound be undefind and throw an error when cancelDeferredCallback been called as function in  /Users/zolad/work/app/cw2/node_modules/react-reconciler/cjs/react-reconciler.development.js:6599\r\n\r\n**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12310",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12310/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12310/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12310/events",
    "html_url": "https://github.com/facebook/react/issues/12310",
    "id": 301109892,
    "number": 12310,
    "title": "getDerivedStateFromProps and MobX",
    "user": {
      "login": "bradenhs",
      "id": 22484684,
      "avatar_url": "https://avatars1.githubusercontent.com/u/22484684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bradenhs",
      "html_url": "https://github.com/bradenhs",
      "followers_url": "https://api.github.com/users/bradenhs/followers",
      "following_url": "https://api.github.com/users/bradenhs/following{/other_user}",
      "gists_url": "https://api.github.com/users/bradenhs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bradenhs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bradenhs/subscriptions",
      "organizations_url": "https://api.github.com/users/bradenhs/orgs",
      "repos_url": "https://api.github.com/users/bradenhs/repos",
      "events_url": "https://api.github.com/users/bradenhs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bradenhs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 19,
    "created_at": "2018-02-28T17:17:48Z",
    "updated_at": "2018-03-05T23:07:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I use MobX to manage the application state of react apps I build and ever since I read this [post](https://blog.cloudboost.io/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e) I've been using MobX to manage local component state as well. I recently read that React 16.3 will introduce a new static method called `getDerivedStateFromProps` and that some future release will deprecate `componentWillReceiveProps`. I'm worried that deprecating `componentWillReceiveProps` will break some of my components which need to update their state in response to a change in props. **This, of course, wouldn't be an issue except for the fact that `getDerivedStateFromProps` appears to be incompatible with local component state managed by MobX.** One of the things I love about React is that it is so easy to integrate with other tools. The new `getDerivedStateFromProps` static method will reduce some of this flexibility.\r\n\r\nFor those of you who haven't used MobX before the issue here may be a little hard to grasp at first. I've built an example [repo](https://github.com/bradenhs/getDerivedStateFromProps-mobx) where you can see both a MobX and React setState implementation of a component which needs to update it's local state in response to a props change. Take a look at the example, but in brief the core of the issue is that `getDerivedStateFromProps` is a static method and mobx state on the component _instance_ can't be accessed and updated in a static method. `componentWillReceiveProps` is generic enough that updating mobx component state in there is possible in a semantically sound manner. Once it's deprecated, however, I don't know how this will be possible in a non-hacky way.\r\n\r\nI realize I may be a little late with this concern since it appears React 16.3 will be released anytime now. I do, however, think the concern is worth raising since this new change in React will break what is in my view a valid use of React. I'd prefer if another solution was devised which was more flexible for people using React with other tools.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12309",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12309/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12309/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12309/events",
    "html_url": "https://github.com/facebook/react/issues/12309",
    "id": 301085867,
    "number": 12309,
    "title": "Expose the `onSelect` event for any focusable element?",
    "user": {
      "login": "danburzo",
      "id": 205375,
      "avatar_url": "https://avatars3.githubusercontent.com/u/205375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danburzo",
      "html_url": "https://github.com/danburzo",
      "followers_url": "https://api.github.com/users/danburzo/followers",
      "following_url": "https://api.github.com/users/danburzo/following{/other_user}",
      "gists_url": "https://api.github.com/users/danburzo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danburzo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danburzo/subscriptions",
      "organizations_url": "https://api.github.com/users/danburzo/orgs",
      "repos_url": "https://api.github.com/users/danburzo/repos",
      "events_url": "https://api.github.com/users/danburzo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danburzo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-28T16:13:56Z",
    "updated_at": "2018-02-28T16:13:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I was curious earlier if the `onSelect` event works on things other than form elements and `contentEditable` elements, and by disabling a couple of conditions in the code, it seems — at first brush, at least — that `onSelect` works splendidly on any element that is focusable (via the `tabIndex` attribute), to obtain things like:\r\n\r\n![ezgif-2-326cf42421](https://user-images.githubusercontent.com/205375/36798178-8aa7fdda-1cb2-11e8-8838-46e04300a09a.gif)\r\n\r\nWould there be any problem with relaxing the conditions for allowing `onSelect` to include elements that have a `tabIndex` attribute? (Other than the case where existing implementations in userland rely on the event being disabled when `contenteditable = true` is removed from an element)."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12308",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12308/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12308/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12308/events",
    "html_url": "https://github.com/facebook/react/issues/12308",
    "id": 301078737,
    "number": 12308,
    "title": "Reset state",
    "user": {
      "login": "qtbit",
      "id": 25822015,
      "avatar_url": "https://avatars3.githubusercontent.com/u/25822015?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qtbit",
      "html_url": "https://github.com/qtbit",
      "followers_url": "https://api.github.com/users/qtbit/followers",
      "following_url": "https://api.github.com/users/qtbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/qtbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qtbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qtbit/subscriptions",
      "organizations_url": "https://api.github.com/users/qtbit/orgs",
      "repos_url": "https://api.github.com/users/qtbit/repos",
      "events_url": "https://api.github.com/users/qtbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qtbit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-02-28T15:55:36Z",
    "updated_at": "2018-03-02T13:53:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I'd like to have a function that would reset all the state of react to start rendering from scratch again.\r\n\r\nCurrently, the code below causes a duplication of virtual dom. The React tab in devtools shows `<App />` node twice.\r\n\r\n```\r\ndocument.body.innerHTML = '<div id=\"app\"></div>';\r\nReactDOM.render(<App />, document.querySelector(\"#app\"));\r\n\r\n// page change\r\n\r\ndocument.body.innerHTML = '<div id=\"app\"></div>';\r\nReactDOM.render(<App />, document.querySelector(\"#app\"));\r\n```\r\n\r\nIt is possible to unmount it before the container element is lost to prevent the duplication of vdom.\r\n\r\n```\r\ndocument.body.innerHTML = '<div id=\"app\"></div>';\r\nReactDOM.render(<App />, document.querySelector(\"#app\"));\r\nReactDOM.unmountComponentAtNode(document.querySelector(\"#app\")); // <--- unmount and remove\r\n\r\n// page change\r\n\r\ndocument.body.innerHTML = '<div id=\"app\"></div>';\r\nReactDOM.render(<App />, document.querySelector(\"#app\"));\r\n```\r\n\r\nHowever, sometimes it is difficult to bind to an event or change a router code in a legacy app where React is used for rendering a page. The page is destroyed when the router decides to change the page to another and React don't get the same container element again.\r\n\r\nSince you can't call `ReactDOM.unmountComponentAtNode` before the change, nor after the change (before rendering) with the lost container element, it would be useful to have a function to reset all the React state before rendering the new page.\r\n\r\n```\r\ndocument.body.innerHTML = '<div id=\"app\"></div>';\r\nReactDOM.render(<App />, document.querySelector(\"#app\"));\r\n\r\n// page change\r\n\r\ndocument.body.innerHTML = '<div id=\"app\"></div>';\r\nReactDOM.reset();  // <--- I don't care about the previous state, I want to render the component from scratch (as there would be no rendering before)\r\nReactDOM.render(<App />, document.querySelector(\"#app\"));\r\n```\r\n\r\nThe name doesn't have to be called `reset` or be within `ReactDOM`. The point here is that the rendering should not duplicate virtual dom since the container element was changed.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12301",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12301/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12301/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12301/events",
    "html_url": "https://github.com/facebook/react/issues/12301",
    "id": 300528372,
    "number": 12301,
    "title": "state change in td element",
    "user": {
      "login": "rayeeskm",
      "id": 2072089,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2072089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rayeeskm",
      "html_url": "https://github.com/rayeeskm",
      "followers_url": "https://api.github.com/users/rayeeskm/followers",
      "following_url": "https://api.github.com/users/rayeeskm/following{/other_user}",
      "gists_url": "https://api.github.com/users/rayeeskm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rayeeskm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rayeeskm/subscriptions",
      "organizations_url": "https://api.github.com/users/rayeeskm/orgs",
      "repos_url": "https://api.github.com/users/rayeeskm/repos",
      "events_url": "https://api.github.com/users/rayeeskm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rayeeskm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-02-27T08:05:21Z",
    "updated_at": "2018-03-12T02:50:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Displaying tabular rows, when setting data in td element, on state change it displays only the currently updated td element data..all the other ones go missing from screen. When the same thing is placed within text box in each td element things work fine.\r\n\r\nFollowing is sample the code :\r\n\r\nWorking code :\r\n`<tr key={id}> `\r\n`<td> <input  value={this.state.price[id]}/> </td>`\r\n\r\nFailing code :\r\n`<tr key={id}> `\r\n`<td> {this.state.price[id]} </td>`"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12297",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12297/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12297/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12297/events",
    "html_url": "https://github.com/facebook/react/issues/12297",
    "id": 300466987,
    "number": 12297,
    "title": "Errors thrown at componentUnmount aren't reported at proper timings.",
    "user": {
      "login": "karak",
      "id": 156341,
      "avatar_url": "https://avatars2.githubusercontent.com/u/156341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karak",
      "html_url": "https://github.com/karak",
      "followers_url": "https://api.github.com/users/karak/followers",
      "following_url": "https://api.github.com/users/karak/following{/other_user}",
      "gists_url": "https://api.github.com/users/karak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karak/subscriptions",
      "organizations_url": "https://api.github.com/users/karak/orgs",
      "repos_url": "https://api.github.com/users/karak/repos",
      "events_url": "https://api.github.com/users/karak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karak/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-02-27T02:06:06Z",
    "updated_at": "2018-03-05T00:13:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug, at least in QA respect.\r\n\r\n**What is the current behavior?**\r\n\r\nI'm creating a test-case to handle an error thrown at `componentUnmount`, which is reported  asynchronously since react v16.\r\nBut such errors are reported _only_ at the last test cases in a bunch, which virtually lacks reproducibility to rely on.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nPlease clone [this repository](https://github.com/karak/react-unmount-issue) and execute `yarn test`.\r\n\r\n**What is the expected behavior?**\r\n\r\n1. To report those errors at every test case.\r\n1. To provide a proper way to handle them, especially for testing (already exists?).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12290",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12290/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12290/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12290/events",
    "html_url": "https://github.com/facebook/react/pull/12290",
    "id": 300346463,
    "number": 12290,
    "title": "[react-is] [docs] specify the actual working alpha version of react-is",
    "user": {
      "login": "raunofreiberg",
      "id": 23662329,
      "avatar_url": "https://avatars1.githubusercontent.com/u/23662329?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raunofreiberg",
      "html_url": "https://github.com/raunofreiberg",
      "followers_url": "https://api.github.com/users/raunofreiberg/followers",
      "following_url": "https://api.github.com/users/raunofreiberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/raunofreiberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raunofreiberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raunofreiberg/subscriptions",
      "organizations_url": "https://api.github.com/users/raunofreiberg/orgs",
      "repos_url": "https://api.github.com/users/raunofreiberg/repos",
      "events_url": "https://api.github.com/users/raunofreiberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raunofreiberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-02-26T18:28:53Z",
    "updated_at": "2018-02-27T15:18:49Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12290",
      "html_url": "https://github.com/facebook/react/pull/12290",
      "diff_url": "https://github.com/facebook/react/pull/12290.diff",
      "patch_url": "https://github.com/facebook/react/pull/12290.patch"
    },
    "body": "Recently, I've also gotten the problem described in #12287, whereas you expect the `react-is` package to work out of the box. For future references and helping others avoid this issue, I've went ahead and added a comment for the installation part in the package's docs."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12289",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12289/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12289/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12289/events",
    "html_url": "https://github.com/facebook/react/pull/12289",
    "id": 300108606,
    "number": 12289,
    "title": "Exporting toJSON from react-test-renderer.",
    "user": {
      "login": "diasbruno",
      "id": 362368,
      "avatar_url": "https://avatars2.githubusercontent.com/u/362368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/diasbruno",
      "html_url": "https://github.com/diasbruno",
      "followers_url": "https://api.github.com/users/diasbruno/followers",
      "following_url": "https://api.github.com/users/diasbruno/following{/other_user}",
      "gists_url": "https://api.github.com/users/diasbruno/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/diasbruno/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/diasbruno/subscriptions",
      "organizations_url": "https://api.github.com/users/diasbruno/orgs",
      "repos_url": "https://api.github.com/users/diasbruno/repos",
      "events_url": "https://api.github.com/users/diasbruno/events{/privacy}",
      "received_events_url": "https://api.github.com/users/diasbruno/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-02-26T04:50:16Z",
    "updated_at": "2018-02-27T12:53:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12289",
      "html_url": "https://github.com/facebook/react/pull/12289",
      "diff_url": "https://github.com/facebook/react/pull/12289.diff",
      "patch_url": "https://github.com/facebook/react/pull/12289.patch"
    },
    "body": "Hi,\r\n\r\nIt's far from a perfect solution but it can buy some time and help users\r\nto use `createPortal` with `react-test-renderer`.\r\n\r\nIssue related:\r\n- #11565 \r\n \r\nThe idea is to allow users to convert the rendered elements of a portal to JSON. \r\nSee the test for more details about this.\r\n\r\nPlease let me know if there are any improvements in this PR.\r\nIf the solution is not ideal, it can be closed.\r\n\r\nThank you."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12288",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12288/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12288/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12288/events",
    "html_url": "https://github.com/facebook/react/pull/12288",
    "id": 300101781,
    "number": 12288,
    "title": "Fix jest/matchers/toWarnDev expected, actual order for jest-diff (#12285)",
    "user": {
      "login": "sompylasar",
      "id": 498274,
      "avatar_url": "https://avatars2.githubusercontent.com/u/498274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sompylasar",
      "html_url": "https://github.com/sompylasar",
      "followers_url": "https://api.github.com/users/sompylasar/followers",
      "following_url": "https://api.github.com/users/sompylasar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sompylasar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sompylasar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sompylasar/subscriptions",
      "organizations_url": "https://api.github.com/users/sompylasar/orgs",
      "repos_url": "https://api.github.com/users/sompylasar/repos",
      "events_url": "https://api.github.com/users/sompylasar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sompylasar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-26T03:55:56Z",
    "updated_at": "2018-02-26T03:56:10Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12288",
      "html_url": "https://github.com/facebook/react/pull/12288",
      "diff_url": "https://github.com/facebook/react/pull/12288.diff",
      "patch_url": "https://github.com/facebook/react/pull/12288.patch"
    },
    "body": "`toWarnDev` calls `jestDiff(a, b)` which calls `diffStrings(a, b)` where by default `a` is annotated as `'Expected'` (green), `b` as `'Received'` (red).\r\n\r\nSo the first argument passed into `jestDiff` should be the expected message, the second should be the actual message.\r\nIt was vice versa previously.\r\n\r\n- https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L54\r\n- https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L93\r\n- https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/diff_strings.js#L249-L251\r\n\r\nFixes https://github.com/facebook/react/issues/12285"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12285",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12285/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12285/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12285/events",
    "html_url": "https://github.com/facebook/react/issues/12285",
    "id": 300000088,
    "number": 12285,
    "title": "scripts/jest/matchers/toWarnDev: Expected and actual arguments to `jest-diff` are mixed up.",
    "user": {
      "login": "sompylasar",
      "id": 498274,
      "avatar_url": "https://avatars2.githubusercontent.com/u/498274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sompylasar",
      "html_url": "https://github.com/sompylasar",
      "followers_url": "https://api.github.com/users/sompylasar/followers",
      "following_url": "https://api.github.com/users/sompylasar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sompylasar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sompylasar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sompylasar/subscriptions",
      "organizations_url": "https://api.github.com/users/sompylasar/orgs",
      "repos_url": "https://api.github.com/users/sompylasar/repos",
      "events_url": "https://api.github.com/users/sompylasar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sompylasar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-25T05:29:36Z",
    "updated_at": "2018-02-25T05:29:36Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\n`toWarnDev` calls `jestDiff(a, b)` as `jestDiff(normalizedMessage, expectedMessages[0])` and `jestDiff([normalizedMessage], expectedMessages)`:\r\nhttps://github.com/facebook/react/blob/94518b068bf52196abea0c83f4c9926bfe2065c6/scripts/jest/matchers/toWarnDev.js#L49-L57\r\n\r\n[`jestDiff(a, b)`](https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L54) [calls](https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L93) [`diffStrings(a, b)`](https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/diff_strings.js#L249-L251) where by default `a` is annotated as `'Expected'` (green), `b` as `'Received'` (red).\r\n\r\nhttps://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/diff_strings.js#L86-L90\r\n```js\r\nconst getAnnotation = (options: ?DiffOptions): string =>\r\n  chalk.green('- ' + ((options && options.aAnnotation) || 'Expected')) +\r\n  '\\n' +\r\n  chalk.red('+ ' + ((options && options.bAnnotation) || 'Received')) +\r\n  '\\n\\n';\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`toWarnDev` should pass the expected values into `a`, the actual (received) values into `b` of `jestDiff`:\r\n```js\r\njestDiff(expectedMessages[0], normalizedMessage)\r\n```\r\n```js\r\njestDiff(expectedMessages, [normalizedMessage])\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12284",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12284/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12284/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12284/events",
    "html_url": "https://github.com/facebook/react/issues/12284",
    "id": 299992422,
    "number": 12284,
    "title": "scripts/jest/matchers/toWarnDev: \"Unexpected warning recorded: null\" when there's no null, caused by jest-diff returning null",
    "user": {
      "login": "sompylasar",
      "id": 498274,
      "avatar_url": "https://avatars2.githubusercontent.com/u/498274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sompylasar",
      "html_url": "https://github.com/sompylasar",
      "followers_url": "https://api.github.com/users/sompylasar/followers",
      "following_url": "https://api.github.com/users/sompylasar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sompylasar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sompylasar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sompylasar/subscriptions",
      "organizations_url": "https://api.github.com/users/sompylasar/orgs",
      "repos_url": "https://api.github.com/users/sompylasar/repos",
      "events_url": "https://api.github.com/users/sompylasar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sompylasar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-25T02:55:02Z",
    "updated_at": "2018-02-25T02:55:02Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nExample:\r\n```js\r\n      // getTestDocument() has an extra <meta> that we didn't render.\r\n      expect(() =>\r\n        ReactDOM.hydrate(<Component text=\"Hello world\" />, testDocument),\r\n      ).toWarnDev('Did not expect server HTML to contain a <meta> in <head>.');\r\n```\r\n\r\nIf the actual warning is multiline:\r\n```\r\n\"Warning: Did not expect server HTML to contain a <meta charset=\"utf-8\"> in <head>.\r\n    in title (at **)\r\n    in head (at **)\r\n    in html (at **)\r\n    in Component (at **)\"\r\n```\r\n\r\nThe output message received from the `toWarnDev` matcher is confusing:\r\n```\r\n  ● rendering React components at document › with new explicit hydration API › should render w/ no markup to full document\r\n\r\n    Error: Unexpected warning recorded: null\r\n\r\n      60 |         // We don't throw an Error here though,\r\n      61 |         // Because it might be suppressed by ReactFiberScheduler.\r\n    > 62 |         unexpectedWarnings.push(new Error(errorMessage));\r\n      63 |       };\r\n      64 | \r\n      65 |       // TODO Decide whether we need to support nested toWarn* expectations.\r\n      \r\n      at CustomConsole.consoleSpy (scripts/jest/matchers/toWarnDev.js:62:35)\r\n      at printWarning (node_modules/fbjs/lib/warning.js:33:15)\r\n      at warning (node_modules/fbjs/lib/warning.js:57:20)\r\n      at warnForDeletedHydratableElement (packages/react-dom/src/client/ReactDOMFiberComponent.js:1424:473)\r\n      at didNotHydrateInstance (packages/react-dom/src/client/ReactDOM.js:938:11)\r\n      at deleteHydratableInstance (packages/react-reconciler/src/ReactFiberHydrationContext.js:106:11)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nExpected `toWarnDev` to at least show the original and the expected messages without a fancy `jest-diff`, but not `null`.\r\n\r\nUpstream bug in `jest-diff`: https://github.com/facebook/jest/issues/5657\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12279",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12279/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12279/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12279/events",
    "html_url": "https://github.com/facebook/react/pull/12279",
    "id": 299911170,
    "number": 12279,
    "title": "[WIP] Suspense",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 32,
    "created_at": "2018-02-24T04:37:20Z",
    "updated_at": "2018-03-21T01:46:24Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12279",
      "html_url": "https://github.com/facebook/react/pull/12279",
      "diff_url": "https://github.com/facebook/react/pull/12279.diff",
      "patch_url": "https://github.com/facebook/react/pull/12279.patch"
    },
    "body": "![source](https://user-images.githubusercontent.com/3624098/36625698-50323b20-18d9-11e8-87bf-de1133b023ec.gif)\r\n\r\nTODO:\r\n\r\n- [ ] Cache invalidation\r\n- [ ] Naming things\r\n- [ ] Remove dependency on `Promise.race`\r\n- [ ] Dan's bug https://github.com/acdlite/react/pull/2"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12278",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12278/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12278/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12278/events",
    "html_url": "https://github.com/facebook/react/pull/12278",
    "id": 299904662,
    "number": 12278,
    "title": "Skip portals when rendering on server-side.",
    "user": {
      "login": "diasbruno",
      "id": 362368,
      "avatar_url": "https://avatars2.githubusercontent.com/u/362368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/diasbruno",
      "html_url": "https://github.com/diasbruno",
      "followers_url": "https://api.github.com/users/diasbruno/followers",
      "following_url": "https://api.github.com/users/diasbruno/following{/other_user}",
      "gists_url": "https://api.github.com/users/diasbruno/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/diasbruno/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/diasbruno/subscriptions",
      "organizations_url": "https://api.github.com/users/diasbruno/orgs",
      "repos_url": "https://api.github.com/users/diasbruno/repos",
      "events_url": "https://api.github.com/users/diasbruno/events{/privacy}",
      "received_events_url": "https://api.github.com/users/diasbruno/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-02-24T02:49:13Z",
    "updated_at": "2018-02-27T12:51:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12278",
      "html_url": "https://github.com/facebook/react/pull/12278",
      "diff_url": "https://github.com/facebook/react/pull/12278.diff",
      "patch_url": "https://github.com/facebook/react/pull/12278.patch"
    },
    "body": "Hi,\r\n\r\nHere is an option that just skips portals while rendering on the server-side environment.\r\n\r\nI'll try collect some ideas to help dealing with modals on tests.\r\n\r\nPlease let me know if there are any improvements in this PR. \r\nIf the solution is not ideal, it can be closed.\r\n\r\nThank you."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12268",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12268/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12268/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12268/events",
    "html_url": "https://github.com/facebook/react/issues/12268",
    "id": 299498173,
    "number": 12268,
    "title": "Checkboxes handling going wrong",
    "user": {
      "login": "varunrajasekhar",
      "id": 18426078,
      "avatar_url": "https://avatars0.githubusercontent.com/u/18426078?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/varunrajasekhar",
      "html_url": "https://github.com/varunrajasekhar",
      "followers_url": "https://api.github.com/users/varunrajasekhar/followers",
      "following_url": "https://api.github.com/users/varunrajasekhar/following{/other_user}",
      "gists_url": "https://api.github.com/users/varunrajasekhar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/varunrajasekhar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/varunrajasekhar/subscriptions",
      "organizations_url": "https://api.github.com/users/varunrajasekhar/orgs",
      "repos_url": "https://api.github.com/users/varunrajasekhar/repos",
      "events_url": "https://api.github.com/users/varunrajasekhar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/varunrajasekhar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-22T20:32:49Z",
    "updated_at": "2018-02-22T20:32:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I am having a weird issue:\r\nI have a button called assign and when I click on it, a modal with userslist(checkboxes) opens\r\nThis modal has a confirm and cancel button. THe buttons functionality should be such as\r\nWhen I click on confirm, the checked or unchecked data(no matter what selection is made) should save and when I click on cancel any data should revert back to confirmed(saved) data.\r\nI have built my component such that when loading initially, I am copying the state and then the 'copystate' changes are saved to original state when confirmed and when cancelled, original state changes are copied to 'copystate'.\r\nBut what is happening is the state is getting updated no matter what change I make in the copystate. and the copystate and original state are having the same data.\r\n\r\nCan somebody help me with this:\r\nBelow is my render method:\r\n\r\n```\r\nrender() {\r\n    const ready = this.state.ready;\r\n    return (\r\n      <div>\r\n        {ready &&\r\n          this.state.data.addOnProducts.map((val, idx) => {\r\n            const userListIndex = val.indexOf()\r\n            return (\r\n              <div key={idx}>\r\n                <button className={`btn btn--rounded btn--assign`} onClick={() => this.openModal(idx)}>\r\n                  {'assign'}\r\n                </button>\r\n                {this.state.showModal && (\r\n                  <CheckboxList\r\n                    key={idx}\r\n                    list={this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList}\r\n                    selectHandler={this.assignHandler}\r\n                    //label={this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList}\r\n                  />\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n```\r\n\r\nBelow is my assign handler:\r\n\r\n```\r\nassignHandler(idx) {\r\n    const newData = Object.assign({}, this.state.newData);\r\n    console.log('state list',this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n    console.log('newData list',this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n    newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList.map((user, index) => {\r\n      if (index === idx) {\r\n        user.selected = !user.selected;\r\n      }\r\n     return user;\r\n    });\r\n    this.setState(\r\n    {\r\n      newData: Object.assign({}, newData)\r\n    }, function() {\r\n      console.log('state list',this.state.data.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n      console.log('newData list',this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n    });\r\n  };\r\n```\r\nThis is Cancel Method:\r\n\r\n```\r\n cancelAssignUsers() {\r\n        const stateUsersList = Object.assign({}, this.state.data.addOnProducts[this.state.currentAddOnIndex].usersData);\r\n        const newDataCopy = Object.assign({}, this.state.newData);\r\n    console.log(stateUsersList.usersList);\r\n        newDataCopy.addOnProducts[this.state.currentAddOnIndex].usersData.usersList = stateUsersList.usersList;\r\n    console.log(newDataCopy.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n        this.setState({\r\n          showModal: false,\r\n          newData: Object.assign({}, newDataCopy)\r\n        });\r\n  }\r\n```\r\n\r\nthis is my confirm method:\r\n```\r\nconfirmAssignUsers() {\r\n    const newDataUsersList = Object.assign(\r\n      {},\r\n      this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData\r\n    );\r\n    const stateCopy = Object.assign({}, this.state.data);\r\n    stateCopy.addOnProducts[this.state.currentAddOnIndex].usersData.usersList = newDataUsersList.usersList;\r\nconsole.log(stateCopy.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n    this.setState({\r\n      showModal: false,\r\n      data: Object.assign({}, stateCopy)\r\n    });\r\n  }\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12263",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12263/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12263/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12263/events",
    "html_url": "https://github.com/facebook/react/pull/12263",
    "id": 299108434,
    "number": 12263,
    "title": "Unperformant Stringify Warning - WIP",
    "user": {
      "login": "Swieckowski",
      "id": 31023010,
      "avatar_url": "https://avatars0.githubusercontent.com/u/31023010?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Swieckowski",
      "html_url": "https://github.com/Swieckowski",
      "followers_url": "https://api.github.com/users/Swieckowski/followers",
      "following_url": "https://api.github.com/users/Swieckowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/Swieckowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Swieckowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Swieckowski/subscriptions",
      "organizations_url": "https://api.github.com/users/Swieckowski/orgs",
      "repos_url": "https://api.github.com/users/Swieckowski/repos",
      "events_url": "https://api.github.com/users/Swieckowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Swieckowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-02-21T20:02:08Z",
    "updated_at": "2018-03-08T07:24:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12263",
      "html_url": "https://github.com/facebook/react/pull/12263",
      "diff_url": "https://github.com/facebook/react/pull/12263.diff",
      "patch_url": "https://github.com/facebook/react/pull/12263.patch"
    },
    "body": "Closes #12209. \r\n`performance.now()` was not supported while I was writing this, so I'm using the less precise `Date.now()`.\r\n\r\nI have written a test to see if the warning shows up if something takes too long to stringify, but don't have one for if it does not warn, since I didn't see anyone else test for anything like that. "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12261",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12261/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12261/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12261/events",
    "html_url": "https://github.com/facebook/react/issues/12261",
    "id": 298997978,
    "number": 12261,
    "title": "setState callbacks not getting executed in expected order",
    "user": {
      "login": "nihartrivedi810",
      "id": 5328845,
      "avatar_url": "https://avatars0.githubusercontent.com/u/5328845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nihartrivedi810",
      "html_url": "https://github.com/nihartrivedi810",
      "followers_url": "https://api.github.com/users/nihartrivedi810/followers",
      "following_url": "https://api.github.com/users/nihartrivedi810/following{/other_user}",
      "gists_url": "https://api.github.com/users/nihartrivedi810/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nihartrivedi810/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nihartrivedi810/subscriptions",
      "organizations_url": "https://api.github.com/users/nihartrivedi810/orgs",
      "repos_url": "https://api.github.com/users/nihartrivedi810/repos",
      "events_url": "https://api.github.com/users/nihartrivedi810/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nihartrivedi810/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 620368407,
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-02-21T14:47:15Z",
    "updated_at": "2018-03-18T22:59:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nA bug\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nv. 15.6.2\r\nNot sure if it worked in previous versions.\r\n\r\n**What is the current behavior?**\r\n\r\nFor the following piece of code, when `componentWillReceiveProps` is called multiple times quickly without executing the callbacks(or completing `setState`), it is expected that the callbacks are executed in the correct order with the corresponding `nextProps` in their scope.\r\n\r\n```\r\ncomponentWillReceiveProps(nextProps) {\r\n    this.setState({someStateValue:  nextProps.someValue}, () => {\r\n         this.doSomethingElse(nextProps);\r\n    })\r\n}\r\n```\r\n\r\nBut, contrary to the expected behavior, the callback with the later value of `nextProps` is being called first and the one with the older value next, eventually calling the `doSomethingElse` with an older value.\r\n\r\nUpon debugging, in the following piece of code from `react-dom.js`\r\n\r\n```\r\nenqueueCallback: function (publicInstance, callback, callerName) {\r\n    ReactUpdateQueue.validateCallback(callback, callerName);\r\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);\r\n\r\n    // Previously we would throw an error if we didn't have an internal\r\n    // instance. Since we want to make it a no-op instead, we mirror the same\r\n    // behavior we have in other enqueue* methods.\r\n    // We also need to ignore callbacks in componentWillMount. See\r\n    // enqueueUpdates.\r\n    if (!internalInstance) {\r\n      return null;\r\n    }\r\n\r\n    if (internalInstance._pendingCallbacks) {\r\n      internalInstance._pendingCallbacks.push(callback);\r\n    } else {\r\n      internalInstance._pendingCallbacks = [callback];\r\n    }\r\n    // TODO: The callback here is ignored when setState is called from\r\n    // componentWillMount. Either fix it or disallow doing so completely in\r\n    // favor of getInitialState. Alternatively, we can disallow\r\n    // componentWillMount during server-side rendering.\r\n    enqueueUpdate(internalInstance);\r\n  },\r\n```\r\nIt was found that for the second call to `setState`, `internalInstance._pendingCallbacks` was null even though the callback for the first `setState` was not executed.\r\n\r\n**What is the expected behavior?**\r\nExpected that callbacks are registered and executed in order.\r\n\r\nIs this a known bug or is there some mistake being made here? "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12255",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12255/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12255/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12255/events",
    "html_url": "https://github.com/facebook/react/issues/12255",
    "id": 298696182,
    "number": 12255,
    "title": "Strange behavior of conditional rendering when bypassing props in functional component",
    "user": {
      "login": "ru-web-designer",
      "id": 3310192,
      "avatar_url": "https://avatars2.githubusercontent.com/u/3310192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ru-web-designer",
      "html_url": "https://github.com/ru-web-designer",
      "followers_url": "https://api.github.com/users/ru-web-designer/followers",
      "following_url": "https://api.github.com/users/ru-web-designer/following{/other_user}",
      "gists_url": "https://api.github.com/users/ru-web-designer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ru-web-designer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ru-web-designer/subscriptions",
      "organizations_url": "https://api.github.com/users/ru-web-designer/orgs",
      "repos_url": "https://api.github.com/users/ru-web-designer/repos",
      "events_url": "https://api.github.com/users/ru-web-designer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ru-web-designer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-02-20T18:15:25Z",
    "updated_at": "2018-02-21T13:14:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "This is a bug I've got today. I have a parent component, that includes a nested child component with a prop passed into it. Prop named the same way as a variable, from which I get the value (idk if this is important). Prop is used later to conditional render some JSX block. In the first cycle, component gets this prop in a correct way: null passed and JSX block didn't render. In the next cycle, when prop gets a value insted of null, it also works. But when finally prop got a null agian, like in the beginning, condition doesn't work proper, block still appears.\r\n\r\nCode trivia:\r\n\r\n```jsx\r\n//doesn't work proper\r\nconst Parent = ({someProp}) => {\r\n\r\n\t//some code here...\r\n\r\n\treturn (\r\n\t\t<Child someProp={someProp}/>\r\n\t);\r\n};\r\n\r\nconst Child = ({someProp}) => (\r\n\t{someProp ? (<SomeJsx/>) : (null)}\r\n);\r\n\r\n//works great\r\nconst Parent = ({someBigProps}) => {\r\n\tvar someProp = someBigProps.someProp;\r\n\r\n\t//some code here...\r\n\r\n\t{someProp ? (<SomeJsx/>) : (null)}\r\n};\r\n```\r\n\r\nReal code shots:\r\n\r\n![image](https://user-images.githubusercontent.com/3310192/36441246-1a638dd0-1683-11e8-82dc-27a9e1df320a.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3310192/36441259-1f0f206a-1683-11e8-9f3c-35ef33e8af74.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3310192/36441261-24261af4-1683-11e8-8111-05120e08a6a3.png)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12253",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12253/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12253/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12253/events",
    "html_url": "https://github.com/facebook/react/pull/12253",
    "id": 298695035,
    "number": 12253,
    "title": "[WIP] Add requestIdleCallback polyfill package",
    "user": {
      "login": "aweary",
      "id": 6886061,
      "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aweary",
      "html_url": "https://github.com/aweary",
      "followers_url": "https://api.github.com/users/aweary/followers",
      "following_url": "https://api.github.com/users/aweary/following{/other_user}",
      "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
      "organizations_url": "https://api.github.com/users/aweary/orgs",
      "repos_url": "https://api.github.com/users/aweary/repos",
      "events_url": "https://api.github.com/users/aweary/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aweary/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-02-20T18:11:27Z",
    "updated_at": "2018-03-15T04:07:46Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12253",
      "html_url": "https://github.com/facebook/react/pull/12253",
      "diff_url": "https://github.com/facebook/react/pull/12253.diff",
      "patch_url": "https://github.com/facebook/react/pull/12253.patch"
    },
    "body": "Adds a new package, `request-idle-callback-polyfill` (final name pending) that's based on the polyfill inside of `ReactDOMFrameScheduling`. Adds support for scheduling multiple callbacks. It also schedules a `setTimeout` call to ensure that callbacks with timeouts get called.\r\n\r\n## TODO\r\n\r\n- [ ] create two entry points, one that writes to global and one that doesn't\r\n- [ ] See if we can detect native rIC implementations and warn when people do the wrong thing\r\n- [ ] figure out the actual name for the package\r\n- [ ] figure out the correct build config for `rollup/bundles.js` (probably don't need prod/dev builds?)\r\n- [ ] determine the final API <sup>[1](#apifootnote)</sup>\r\n- [ ] remove the previous polyfill from `ReactDOMFrameScheduling` and import this one\r\n     - [ ] Depending on this answer, potentially re-export the native `requestIdleCallback` if it exists\r\n\r\n________\r\n\r\n<a name=\"apifootnote\">1</a>: For example, should it export `requestIdleCallback` or write to `window`?"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12251",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12251/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12251/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12251/events",
    "html_url": "https://github.com/facebook/react/issues/12251",
    "id": 298473452,
    "number": 12251,
    "title": "Does react still require non-toplevel submit handler?",
    "user": {
      "login": "Ailrun",
      "id": 12473268,
      "avatar_url": "https://avatars3.githubusercontent.com/u/12473268?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ailrun",
      "html_url": "https://github.com/Ailrun",
      "followers_url": "https://api.github.com/users/Ailrun/followers",
      "following_url": "https://api.github.com/users/Ailrun/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ailrun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ailrun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ailrun/subscriptions",
      "organizations_url": "https://api.github.com/users/Ailrun/orgs",
      "repos_url": "https://api.github.com/users/Ailrun/repos",
      "events_url": "https://api.github.com/users/Ailrun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ailrun/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 620368407,
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-02-20T05:09:50Z",
    "updated_at": "2018-02-24T04:01:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug? Maybe.\r\n\r\n**What is the current behavior?**\r\n\r\nUsing non-delegated handler for submit event.\r\n\r\n**What is the expected behavior?**\r\n\r\nAfter IE9, at least I know, submit event bubbled up.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2.0"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12247",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12247/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12247/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12247/events",
    "html_url": "https://github.com/facebook/react/issues/12247",
    "id": 298217188,
    "number": 12247,
    "title": "Support for changing a Portal's container without remounting children?",
    "user": {
      "login": "danielran",
      "id": 8035790,
      "avatar_url": "https://avatars1.githubusercontent.com/u/8035790?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielran",
      "html_url": "https://github.com/danielran",
      "followers_url": "https://api.github.com/users/danielran/followers",
      "following_url": "https://api.github.com/users/danielran/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielran/subscriptions",
      "organizations_url": "https://api.github.com/users/danielran/orgs",
      "repos_url": "https://api.github.com/users/danielran/repos",
      "events_url": "https://api.github.com/users/danielran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielran/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-19T09:59:43Z",
    "updated_at": "2018-02-19T09:59:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "(This is related to https://github.com/facebook/react/issues/3965.)\r\n\r\nI'm working on a project with a lot of globally unique component instances. (In other words, their `key`s are essentially database IDs.) It also has DnD functionality. For reordering, everything is fine, but moving an instance from one parent to another causes a complete re-render of the instance.\r\n\r\nInstead of moving the nodes around myself, I was thinking of using Portals. Each instance has a prop for which element ID they should render inside. Then, to reparent them, it'd be a simple case of passing a different element ID. (I'm using Redux, so it'd just be a `string` in the state.)\r\n\r\nHowever, changing a Portal's container node also causes a complete re-render of everything passed to `ReactDOM.createPortal`. (See this [CodePen](https://codepen.io/anon/pen/PQQKRP).)\r\n\r\nWould it be possible to skip this re-rendering and effectively move the Portal contents instead?"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12246",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12246/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12246/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12246/events",
    "html_url": "https://github.com/facebook/react/issues/12246",
    "id": 298131626,
    "number": 12246,
    "title": "Context update doesn't fully propagate in some cases",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "acdlite",
      "id": 3624098,
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "acdlite",
        "id": 3624098,
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-02-18T23:59:08Z",
    "updated_at": "2018-02-23T18:43:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "I think there may be a bug in context in the latest alpha. When some updates are scheduled in the commit phase, it doesn't seem to propagate.\r\n\r\n```\r\ngit clone https://github.com/gaearon/emoji-search.git\r\ncd emoji-search\r\nyarn\r\nyarn start\r\n```\r\n\r\nEnter \"mon\". Erase it. Click on \"dark mode\".\r\nExpected: all children update. Actual: some children don't update.\r\n\r\nThis only seems to happen with [this indirection](https://github.com/gaearon/emoji-search/blob/2a3e23001ac5b1b2a05bc7b4ea9d7ef254888739/src/App.js#L12-L25).\r\n\r\n![gif](https://d2ffutrenqvap3.cloudfront.net/items/2E3k0F2r3H0u040P2v2n/Screen%20Recording%202018-02-18%20at%2023.57.gif?v=4b4b511e)"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12242",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12242/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12242/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12242/events",
    "html_url": "https://github.com/facebook/react/pull/12242",
    "id": 298042431,
    "number": 12242,
    "title": "Regression: React 16 automatically marks first item of a mutliple select as checked",
    "user": {
      "login": "GarethSmall",
      "id": 32682373,
      "avatar_url": "https://avatars2.githubusercontent.com/u/32682373?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GarethSmall",
      "html_url": "https://github.com/GarethSmall",
      "followers_url": "https://api.github.com/users/GarethSmall/followers",
      "following_url": "https://api.github.com/users/GarethSmall/following{/other_user}",
      "gists_url": "https://api.github.com/users/GarethSmall/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GarethSmall/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GarethSmall/subscriptions",
      "organizations_url": "https://api.github.com/users/GarethSmall/orgs",
      "repos_url": "https://api.github.com/users/GarethSmall/repos",
      "events_url": "https://api.github.com/users/GarethSmall/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GarethSmall/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-02-17T22:38:40Z",
    "updated_at": "2018-03-20T22:01:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12242",
      "html_url": "https://github.com/facebook/react/pull/12242",
      "diff_url": "https://github.com/facebook/react/pull/12242.diff",
      "patch_url": "https://github.com/facebook/react/pull/12242.patch"
    },
    "body": "## Problem\r\n\r\nWhen creating a select element and setting multiple the first element would be selected. This was due to the multiple prop being set after the children we're appended.\r\n\r\nAn non-react example case created by @aweary can been seen here - https://jsfiddle.net/dm6vkq9q/\r\n\r\n## Tradeoffs / Misc\r\n\r\nIn my original solution I added a new hook to set props for just the select element before the children we're appended. This worked only because it was setting just the select props first. An alternative idea proposed was to switch the order of appendChildren > setProps to setProps > appendChildren. this will not work in the instance that we have a defualtValue set for our select input. When we change this order a defaultValue is ignored. There we're also many other tests that broke in this process. Although this is bit of a hacky solution this will not require us to make any dangerous changes to the code base.\r\n\r\n## Solution\r\n\r\nIn postMountWrapper in ReactDOMFiberSelect.js I set selectedIndex for the select element to -1\r\n\r\n## Issue\r\nhttps://github.com/facebook/react/issues/12200\r\n\r\n## Related closed pull requests\r\nhttps://github.com/facebook/react/pull/12240\r\n\r\n@aweary @gaearon "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12235",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12235/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12235/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12235/events",
    "html_url": "https://github.com/facebook/react/issues/12235",
    "id": 297641027,
    "number": 12235,
    "title": "Extracting a Context Stack",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-02-16T00:04:58Z",
    "updated_at": "2018-03-09T17:53:27Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "A useful feature of context is creating a custom stack of things to see what your component is embedded in side.\r\n\r\nI think the primary use case is logging explicitly.\r\n\r\nCurrently that is pretty expensive to maintain just *in case* you need it. See #12234 as an example.\r\n\r\nWe could provide an API that lazily extracts a whole path of contexts from the tree.\r\n\r\n```js\r\n<FooContext.Provider value={\"foo\"}>\r\n  <FooContext.Provider value={\"bar\"}>\r\n    <FooContext.Provider value={\"baz\"}>\r\n      <App />\r\n    </FooContext.Provider>\r\n  </FooContext.Provider>\r\n</FooContext.Provider>\r\n```\r\n\r\n```js\r\nclass App extends React.Component {\r\n  log() {\r\n    var stack = this.getContextStack(FooContext);\r\n    logToServer(stack); // [\"foo\", \"bar\", \"baz\"]\r\n  }\r\n  render() {\r\n    return <div onClick={this.log} />;\r\n  }\r\n}\r\n```\r\n\r\nIt would basically synchronously rerender the shortest path to recreate the context at the time of the call to create the stack lazily.\r\n\r\ncc @acdlite "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12234",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12234/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12234/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12234/events",
    "html_url": "https://github.com/facebook/react/issues/12234",
    "id": 297640020,
    "number": 12234,
    "title": "Context Transform",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2018-02-15T23:59:23Z",
    "updated_at": "2018-02-17T19:27:58Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "With the new context API it is really bulky to create a middle man that consumes one context value, transforms it and provides another one. You have to create many components and store an intermediate state to avoid rerendering the provider if the input is unchanged.\r\n\r\nWe could have a convenience API for this use case.\r\n\r\n```js\r\nfunction transform(inputValue) {\r\n  return [...inputValue, extraData];\r\n}\r\n\r\n<Context.Middleware transform={transform}>{children}</Context.Middleware>\r\n```\r\n\r\ncc @acdlite "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12233",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12233/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12233/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12233/events",
    "html_url": "https://github.com/facebook/react/issues/12233",
    "id": 297543236,
    "number": 12233,
    "title": "Ordering of componentWillMount/Unmount in React 16",
    "user": {
      "login": "liuhelen10",
      "id": 4095479,
      "avatar_url": "https://avatars0.githubusercontent.com/u/4095479?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liuhelen10",
      "html_url": "https://github.com/liuhelen10",
      "followers_url": "https://api.github.com/users/liuhelen10/followers",
      "following_url": "https://api.github.com/users/liuhelen10/following{/other_user}",
      "gists_url": "https://api.github.com/users/liuhelen10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liuhelen10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liuhelen10/subscriptions",
      "organizations_url": "https://api.github.com/users/liuhelen10/orgs",
      "repos_url": "https://api.github.com/users/liuhelen10/repos",
      "events_url": "https://api.github.com/users/liuhelen10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liuhelen10/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false
      },
      {
        "id": 710375792,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2018-02-15T18:07:04Z",
    "updated_at": "2018-02-17T22:53:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "### Problem\r\nIt seems that the ordering of `componentWillMount` and `componentWillUnmount` is no longer guaranteed in React 16 due to support for async `componentWillUnmount`. \r\n\r\nPreviously, `componentWillUnmount` was always called on old components being removed *before* `componentWillMount` was called on new components.\r\n\r\n### Example\r\nWe have a Form component in which inputs \"register\" themselves with the parent Form in `componentWillMount` and deregister themselves in `componentWillUnmount` (this allows the Form to keep track of global state for all of the inputs). The following scenario will cause the Form to throw an error now that ordering is no longer guaranteed:\r\n\r\n```jsx\r\n{ showTextInput ? <TextInput name=\"a\" /> : <CheckboxInput name=\"a\" /> }\r\n```\r\n\r\nIn this scenario, it's possible that the Form will try to register an input with the same name before the previous input has been unmounted, which is not allowed.\r\n\r\n### Question\r\nWhile I understand the reasoning behind this change, I'm wondering what the suggested solution is if our code previously relied on `componentWillUnmount` firing before `componentWillMount`? \r\n\r\nThe most obvious solution that comes to mind is moving the `registerInput` step from `willMount` into `didMount`. However, this means we'll have to deal with an unnecessary re-render upon mounting the input. Is this still the correct approach?"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12232",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12232/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12232/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12232/events",
    "html_url": "https://github.com/facebook/react/issues/12232",
    "id": 297500223,
    "number": 12232,
    "title": "There should be a way to hint hydration on how to reuse DOM nodes.",
    "user": {
      "login": "oalexandersson",
      "id": 1852095,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1852095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oalexandersson",
      "html_url": "https://github.com/oalexandersson",
      "followers_url": "https://api.github.com/users/oalexandersson/followers",
      "following_url": "https://api.github.com/users/oalexandersson/following{/other_user}",
      "gists_url": "https://api.github.com/users/oalexandersson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oalexandersson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oalexandersson/subscriptions",
      "organizations_url": "https://api.github.com/users/oalexandersson/orgs",
      "repos_url": "https://api.github.com/users/oalexandersson/repos",
      "events_url": "https://api.github.com/users/oalexandersson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oalexandersson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-15T16:03:07Z",
    "updated_at": "2018-02-15T16:03:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature Request (since the current, in my opinion rather weird, behaviour is WAI).\r\n\r\n**What is the current behavior?**\r\nhttps://github.com/oalexandersson/react-16-server-client-diff\r\n\r\nIf I render additional DOM on the client, when hydrating, it works partially, but my new DOM nodes get confused with the ones rendered by the server even though they are an obvious addition. Server rendered elements get reused with css classes and all. I would argue that this behavior would be acceptable if the component's state matched with the server-side state, but in my example above I use a state change in componentWillMount to drive the diff.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Clone https://github.com/oalexandersson/react-16-server-client-diff\r\n2. Run `yarn start` or `npm start`\r\n\r\n**What is the expected behavior?**\r\nIf the current behavior is truly what was intended, I would like a way to explicitly hint React on how to hydrate specific nodes. My suggestion is that if nodes have a `key` property, reuse only if its value matches, similar to how React knows how to handle changes in arrays. I have very limited knowledge about how the hydration works (maybe that shows), but afaik this would have virtually no performance impact, and still allow for the client to do pure additions to the DOM.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing React 16.2. Well, yes, it worked in React 15 :)\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12231",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12231/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12231/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12231/events",
    "html_url": "https://github.com/facebook/react/issues/12231",
    "id": 297415610,
    "number": 12231,
    "title": "Using ReactPortal with a newly opened window",
    "user": {
      "login": "Pjata",
      "id": 888976,
      "avatar_url": "https://avatars1.githubusercontent.com/u/888976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pjata",
      "html_url": "https://github.com/Pjata",
      "followers_url": "https://api.github.com/users/Pjata/followers",
      "following_url": "https://api.github.com/users/Pjata/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pjata/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pjata/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pjata/subscriptions",
      "organizations_url": "https://api.github.com/users/Pjata/orgs",
      "repos_url": "https://api.github.com/users/Pjata/repos",
      "events_url": "https://api.github.com/users/Pjata/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pjata/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-15T11:39:14Z",
    "updated_at": "2018-02-15T11:39:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nThere is no interactivity with an highly used React component (ReactTable) in a newly opened window injected via React Portal.\r\nCode based on [this article](https://hackernoon.com/using-a-react-16-portal-to-do-something-cool-2a2d627b0202)\r\nhttps://codesandbox.io/s/84035j8168\r\n\r\n1. Click the open button\r\n2. Table opens in a new window.\r\n3. No interactivity\r\n\r\n**What is the expected behavior?**\r\nThe component should work as in \"docked mode\".\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.2.0, Chrome\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12227",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12227/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12227/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12227/events",
    "html_url": "https://github.com/facebook/react/issues/12227",
    "id": 297220662,
    "number": 12227,
    "title": "ReactDOM.render no longer works synchronously in a nested rendering context",
    "user": {
      "login": "saranrapjs",
      "id": 707098,
      "avatar_url": "https://avatars2.githubusercontent.com/u/707098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saranrapjs",
      "html_url": "https://github.com/saranrapjs",
      "followers_url": "https://api.github.com/users/saranrapjs/followers",
      "following_url": "https://api.github.com/users/saranrapjs/following{/other_user}",
      "gists_url": "https://api.github.com/users/saranrapjs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saranrapjs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saranrapjs/subscriptions",
      "organizations_url": "https://api.github.com/users/saranrapjs/orgs",
      "repos_url": "https://api.github.com/users/saranrapjs/repos",
      "events_url": "https://api.github.com/users/saranrapjs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saranrapjs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929155,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
        "name": "Type: Question",
        "color": "cc317c",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-02-14T19:41:49Z",
    "updated_at": "2018-02-14T21:43:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nReentrancy checks prevent synchronous `ReactDOM.render` in a nested React component. This used to work before React 16, and [seems related to this issue about nested ReactDOM renders](https://github.com/facebook/react/issues/12034)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere's a [JSFiddle](https://jsfiddle.net/e5hbzc1r/14/) that documents the problem, with a simulation of the external dependency where this manifests.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm running into what I think is a [similar problem to this one](https://github.com/facebook/react/issues/12034), with a nested `ReactDOM.render`, except where the difference is that I don't think we can use portals to address our use-case.\r\n\r\nWe have a component which manages the DOM tree for all nodes below it outside of React — it's a contenteditable node and uses the best-in-class [ProseMirror](https://prosemirror.net/) library to manage its children. The component looks something like this:\r\n\r\n```javascript\r\nclass ProseMirror extends Component {\r\n\tcomponentDidMount() {\r\n\t\t// ProseMirror manages the DOM for all nodes below this.el.\r\n\t}\r\n\r\n\tsetRef(el) {\r\n\t\tthis.el = el;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (<div ref={this.setRef} />);\r\n\t}\r\n}\r\n```\r\n\r\nAs part of its render cycle, our configuration of ProseMirror ends up calling:\r\n\r\n```javascript\r\nReactDOM.render(<CrucialSubComponent />, someDivManagedByProseMirror);\r\n```\r\n\r\nto render an isolated child node of `<ProseMirror />`, and wants to be able to immediately afterwards be able to leverage:\r\n\r\n```javascript\r\nthis.el.querySelector('.my-subcomponent')\r\n```\r\n\r\n...but this piece of the DOM is no longer available synchronously, and it looks like this is because of the re-entrancy change that came about in React 16. Portals don't work for us, because the site where the `ReactDOM.render` is being called isn't itself directly part of the root React tree (this is [clearer to observe in the fiddle](https://jsfiddle.net/e5hbzc1r/14/)). The hierarchy is something like `<ProseMirror /> ---> (opaque ProseMirror rendering code) --> <CrucialSubComponent />`. Is there a way to skip these re-entrancy checks in these cases where there's an isolated React render happening in a grandchild of a component, but where the React tree isn't the immediate parent?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nQuerying the DOM immediately after ReactDOM.render worked in versions prior to React 16. We're excited about the async possibilities for our main React tree, but curious if there are workarounds where we can ignore the reentrancy checks for these isolated renders."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12209",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12209/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12209/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12209/events",
    "html_url": "https://github.com/facebook/react/issues/12209",
    "id": 296211558,
    "number": 12209,
    "title": "Warn if stringifying an attribute takes too long",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false
      },
      {
        "id": 588833528,
        "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
        "name": "Difficulty: medium",
        "color": "fbca04",
        "default": false
      },
      {
        "id": 725156255,
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2018-02-11T18:14:28Z",
    "updated_at": "2018-02-14T22:23:15Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "With React 16 we don't have an attribute whitelist so both `src={obj}` and `myattribute={obj}` would be valid. The objects get stringified and added as attributes for smooth migration path because a lot of the existing code already depends on this behavior.\r\n\r\nThere is, however, one pitfall here. Sometimes you made do `<div {...rest}>` and not realize that `rest` includes an object whose stringifying is unusually expensive. For example a deeply nested Immutable Map. Now, this wouldn't produce an error, but it would slow down rendering for no good reason.\r\n\r\nWe could protect against this by putting `performance.now()` counters around the places where we stringify attributes. If stringification takes more than, say, 2 milliseconds, then something bad is going on, and we should probably warn."
  }
]
