[
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12208",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12208/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12208/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12208/events",
    "html_url": "https://github.com/facebook/react/issues/12208",
    "id": 296203595,
    "number": 12208,
    "title": "[react.hydrate] does not match",
    "user": {
      "login": "HsuTing",
      "id": 8859179,
      "avatar_url": "https://avatars3.githubusercontent.com/u/8859179?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HsuTing",
      "html_url": "https://github.com/HsuTing",
      "followers_url": "https://api.github.com/users/HsuTing/followers",
      "following_url": "https://api.github.com/users/HsuTing/following{/other_user}",
      "gists_url": "https://api.github.com/users/HsuTing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HsuTing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HsuTing/subscriptions",
      "organizations_url": "https://api.github.com/users/HsuTing/orgs",
      "repos_url": "https://api.github.com/users/HsuTing/repos",
      "events_url": "https://api.github.com/users/HsuTing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HsuTing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-11T16:35:50Z",
    "updated_at": "2018-02-11T16:36:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\n`react.hydrate` does not match.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n#### Component\r\n```js\r\nrender() {\r\n  return (\r\n    <div>\r\n      {str1}\r\n      {str2}\r\n    </div>\r\n  );\r\n}\r\n```\r\nI use `react.hydrate` to do `SSR`.\r\nThis will show error if `str2` is \"str2\" and `str1` is \"str1\":\r\n```js\r\nWarning: Text content did not match. Server: \"str2str1\" Client: \"str1\"\r\n```\r\nBut the `client` of the `html` is the same as the `server` of the `html`.\r\n\r\n\r\n**What is the expected behavior?**\r\nThis should not show the `Error`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.2.0\r\nOS: Mac OS X 10.13.3\r\nBrowser: Chrome 63.0.3239.132 (Official Build) (64-bit)\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12207",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12207/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12207/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12207/events",
    "html_url": "https://github.com/facebook/react/pull/12207",
    "id": 296192470,
    "number": 12207,
    "title": "Remove use of Proxy for events in development",
    "user": {
      "login": "koba04",
      "id": 250407,
      "avatar_url": "https://avatars2.githubusercontent.com/u/250407?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/koba04",
      "html_url": "https://github.com/koba04",
      "followers_url": "https://api.github.com/users/koba04/followers",
      "following_url": "https://api.github.com/users/koba04/following{/other_user}",
      "gists_url": "https://api.github.com/users/koba04/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/koba04/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/koba04/subscriptions",
      "organizations_url": "https://api.github.com/users/koba04/orgs",
      "repos_url": "https://api.github.com/users/koba04/repos",
      "events_url": "https://api.github.com/users/koba04/events{/privacy}",
      "received_events_url": "https://api.github.com/users/koba04/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-11T14:04:23Z",
    "updated_at": "2018-02-11T14:04:37Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12207",
      "html_url": "https://github.com/facebook/react/pull/12207",
      "diff_url": "https://github.com/facebook/react/pull/12207.diff",
      "patch_url": "https://github.com/facebook/react/pull/12207.patch"
    },
    "body": "This is a PR to remove use of Proxy for events in development. #12171\r\nIn order to that, I verify whether extra properties are being added into events when we take it from the pool.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12206",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12206/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12206/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12206/events",
    "html_url": "https://github.com/facebook/react/issues/12206",
    "id": 296125143,
    "number": 12206,
    "title": "Precompile Renderers with Prepack",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 71502270,
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
        "name": "Component: Build Infrastructure",
        "color": "f9d0c4",
        "default": false
      },
      {
        "id": 760751171,
        "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging",
        "name": "Difficulty: challenging",
        "color": "f2687c",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-02-10T19:11:25Z",
    "updated_at": "2018-02-11T16:24:55Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "Filing this for future work. (If anyone wants to take this up, feel free to! But it's not the easiest task and we won't be able to answer a lot of questions so you'll be largely on your own. It's fun though!)\r\n\r\nWe want to remove as much indirection as we can in hot paths. However React reconciler is abstracted away from the underlying platform through a renderer \"host config\". For example, ReactDOM says [\"here's how you insert a DOM node\"](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/client/ReactDOM.js#L761-L767), and then the reconciler [uses this function](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-reconciler/src/ReactFiberCommitWork.js#L485). The problem is that we get that function by passing a [\"config\" object around](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-reconciler/src/ReactFiberCommitWork.js#L41). This is both extra code to have around, and extra indirection at runtime.\r\n\r\nNote this approach will *not* significantly reduce the code size. But I hope it could make the runtime a bit more efficient.\r\n\r\nIdeally we want the compiled reconciler code to directly include calls into the DOM APIs. We already use Closure Compiler which helps with inlining. But it's not smart enough to see that all functions in the \"host config\" can be fully inlined because the object itself never escapes the bundle. Prepack *is* smart enough for this because it actually executes the initialization code.\r\n\r\nWith this hypothetical new approach, we run Prepack first to get rid of those intermediate representations. Then we run Closure Compiler *on top of that*. Less indirection means Closure Compiler can be smarter about what to inline. I made a proof of concept that shows that the DOM methods successfully end up right in the reconciler hot paths, just like we want:\r\n\r\n<img width=\"350\" alt=\"screen shot 2018-02-10 at 18 39 38\" src=\"https://user-images.githubusercontent.com/810438/36065406-21175038-0e92-11e8-87e1-34f2bb152074.png\">\r\n\r\nMy proof of concept was hacky and done outside the build workflow so I won't be sending a PR. But here's roughly what I did (and what you can try).\r\n\r\nFirst, you'll need to add Prepack to our build workflow. https://github.com/facebook/react/pull/11716 roughly shows *where* that should be done, even though this will give you a broken bundle. You'll need to make sure you include `simpleClosures: true` and (maybe?) `omitInvariants: true` in the options. It will still be broken.\r\n\r\nThe main reason it breaks immediately is the UMD wrapper emitted by Rollup. Prepack just doesn't understand what that soup of checks with `exports`, `module`, and `require` means. I don't think there's an easy way to model this without changing Prepack so I found it easier to [change this function](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/scripts/rollup/build.js#L126) to return `'iife'`. This will tell Rollup to output a simple \"factory pattern\" that assigns to a global, which is more than enough to start hacking on this (but of course will only work in a browser).\r\n\r\nPrepack will still be confused by a few things. I found it easiest to just take the Rollup bundle, save it on the disk, and then manually tweak it and re-run Prepack CLI on it afterwards so that I could quickly get an idea for what exactly is breaking.\r\n\r\nThere are a few common cases:\r\n\r\n* Access to `React.*` (because Prepack doesn't know what it is).\r\n  - It's probably possible to get around this by modeling React as an abstract global, i.e. something like\r\n  \r\n    ```js\r\n    React = __abstract({\r\n      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: __abstract({\r\n        ReactCurrentOwner: __abstract({\r\n          current: __abstract('object')\r\n        }),\r\n        // TODO: other things?\r\n      })\r\n    }, 'React');\r\n    __makeSimple(React);\r\n    __makeSimple(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\r\n    __makeSimple(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner);\r\n    ```\r\n\r\n  prepended to the input bundle.\r\n\r\n  I didn't get very far there so I just replaced `React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.assign` with `Object.assign` in the bundle, but we'll need a proper fix.\r\n\r\n* Access to `window` and `document` during initialization.\r\n  - Some cases like `document.documentMode` can be shimmed with something like:\r\n\r\n  ```js\r\n  document = __abstract({\r\n    documentMode: __abstractOrUndefined('number'),\r\n  });\r\n  __makeSimple(document);\r\n  ```\r\n\r\n  - Other cases like `document.createElement('div').style` probably won't work at all. I don't know how to model this as abstract.\r\n\r\n  - For all cases that aren't clear, I just made them initialize lazily. Prepack only executes the initial path. So code like:\r\n\r\n  ```js\r\n  var supportSomeFeature = document.documentMode <= 11;\r\n\r\n  function shouldDoSomething() {\r\n    if (supportSomeFeature) {\r\n      // ...\r\n    }\r\n  }\r\n  ```\r\n\r\n  could be written like:\r\n\r\n  ```js\r\n  var didInit = false;\r\n  var supportSomeFeature;\r\n\r\n  function ensureReady() {\r\n    if (didInit) {\r\n      return;\r\n    }\r\n    didInit = true;\r\n\r\n    // go wild here!\r\n    supportSomeFeature = document.documentMode <= 11;\r\n  }\r\n\r\n  function shouldDoSomething() {\r\n    ensureReady();\r\n    if (supportSomeFeature) {\r\n      // ...\r\n    }\r\n  }\r\n  ```\r\n\r\n  I'm not super happy about this but it works. There's like 4 or 5 places where this ends up being necessary. Maybe we can model more with abstracts but I don't know Prepack that well.\r\n\r\n* Non-deterministic calls like `Math.random().toString()`\r\n\r\n  Not sure what to do about those. For now I just shimmed them to be string literals. Maybe we can teach Prepack that `Math.random().toString()` is also an abstract string somehow.\r\n\r\nSay we just fix all these immediate issues. Don’t get too excited! The first bundle will be huge. This is because Prepack pre-evaluates all metaprogramming. So code [like this](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/events/getVendorPrefixedEventName.js#L17-L37) will turn into giant \"precomputed\" object literals with all the final values.\r\n\r\nOne way to solve it is just to remove code like this. It can be tricky although with time we should move into that direction. Another way is to delay initialization. Prepack only \"pre-executes\" the initial path. So we can change the code to lazily initialize those objects (e.g. not until the functions that use them are called for the first time). I already did some work to find those places:\r\n\r\n* those [CSS prefixes](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/events/getVendorPrefixedEventName.js#L17-L37) I mentioned\r\n* more [CSS prefixes](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/shared/CSSProperty.js#L75-L79)\r\n* [DOM property configs](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/shared/DOMProperty.js#L202-L492)\r\n* `eventTypes` [here](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/events/SimpleEventPlugin.js#L122-L149)\r\n\r\nThese are the cases that Prepack \"explodes\". By solving them you'll get back to roughly the same bundle size as normal React. For my super hacky version, I made all event plugins \"lazy\" and injected them during the first `ReactDOM.render` call. This way Prepack doesn't attempt to pre-evaluate those paths (which contains those explosive objects). Maybe there's a better way (e.g. making just `eventTypes` lazy, or somehow avoiding the need for those objects altogether).\r\n\r\nTo get rid of the host config, I needed to make sure parts of it [like `mutation` object](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-reconciler/src/ReactFiberCommitWork.js#L263) aren't not referenced in inner closures. Otherwise Prepack won't know it's safe to omit it. So I added `hasMutation = config.mutation` early and then used just that (and the destructured functions themselves). By that point my bundle was already a few hundred bytes smaller than the original one, and the host config indirection was gone.\r\n\r\nThe final problem I bumped into was that GCC was running out of memory. For some reason Prepacked input puts it under more pressure. I was able to work around by manually bumping the process memory limit:\r\n\r\n```\r\nnode --max-old-space-size=8192 ./scripts/rollup/build.js dom-client --type=UMD_PROD \r\n```\r\n\r\nIt peaks around 5GB but then compiles.\r\n\r\nTo sum up, this was fun as an evening hack, and is probably a viable longer term strategy. We need to think about how to solve those object initialization issues and whether we want to make more things lazy. Of course we also need to figure out how to integrate this into our build properly (e.g. do we just re-add UMD/Node headers later? do we model them with Prepack?)\r\n\r\nI think it's a fun task to work on for motivated contributors so I'll tag it as one. But please don't expect that the result would get merged. This is mostly exploratory work. It would be awesome to see a working PR though!"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12204",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12204/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12204/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12204/events",
    "html_url": "https://github.com/facebook/react/pull/12204",
    "id": 296102656,
    "number": 12204,
    "title": "Turn unique key props warning more specific",
    "user": {
      "login": "SadPandaBear",
      "id": 13281562,
      "avatar_url": "https://avatars3.githubusercontent.com/u/13281562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SadPandaBear",
      "html_url": "https://github.com/SadPandaBear",
      "followers_url": "https://api.github.com/users/SadPandaBear/followers",
      "following_url": "https://api.github.com/users/SadPandaBear/following{/other_user}",
      "gists_url": "https://api.github.com/users/SadPandaBear/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SadPandaBear/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SadPandaBear/subscriptions",
      "organizations_url": "https://api.github.com/users/SadPandaBear/orgs",
      "repos_url": "https://api.github.com/users/SadPandaBear/repos",
      "events_url": "https://api.github.com/users/SadPandaBear/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SadPandaBear/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-02-10T13:55:07Z",
    "updated_at": "2018-03-05T15:09:54Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12204",
      "html_url": "https://github.com/facebook/react/pull/12204",
      "diff_url": "https://github.com/facebook/react/pull/12204.diff",
      "patch_url": "https://github.com/facebook/react/pull/12204.patch"
    },
    "body": "Proposed in this [issue](https://github.com/facebook/react/issues/11935).\r\n\r\nA few weeks ago i was attempting to support this the same as it was proposed in this [comment](https://github.com/facebook/react/issues/11935#issuecomment-356024356). \r\n\r\nWhile I was studying React keys flow, i realised that once a key prop is not valid (it holds a non string or number value), React takes the value as default (null) on `ReactElement`. I'm not quite sure how it'd deal on Fiber though.\r\n\r\n![index](https://user-images.githubusercontent.com/13281562/36062670-310bbeb4-0e58-11e8-9f86-9ac8b77e4d14.png)\r\n\r\n\r\nI believe the solution proposed by @gaearon is better because it would bring a bit of tracing for key props and would help on creating features like [this](https://github.com/facebook/react/issues/11996).\r\n\r\nI'm open to suggestions for the \"tracing\" enhancement."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12203",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12203/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12203/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12203/events",
    "html_url": "https://github.com/facebook/react/issues/12203",
    "id": 296101986,
    "number": 12203,
    "title": "Prefix private API fields on the context object",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "acdlite",
      "id": 3624098,
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "acdlite",
        "id": 3624098,
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-02-10T13:45:29Z",
    "updated_at": "2018-02-10T13:46:16Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "Which of these are safe to read?\r\nIt's not obvious to me.\r\n\r\n<img width=\"378\" alt=\"screen shot 2018-02-10 at 13 43 00\" src=\"https://user-images.githubusercontent.com/810438/36062649-5b22aac2-0e68-11e8-971f-6fc763aaab47.png\">\r\n\r\nEven if we don't document the others, people will think they're all safe. We should prefix unsafe ones with underscores (or even longer prefixes like `__internal`)."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12200",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12200/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12200/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12200/events",
    "html_url": "https://github.com/facebook/react/issues/12200",
    "id": 295990671,
    "number": 12200,
    "title": "Regression: React 16 automatically marks first item of a mutliple select as checked",
    "user": {
      "login": "megawac",
      "id": 3475472,
      "avatar_url": "https://avatars2.githubusercontent.com/u/3475472?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/megawac",
      "html_url": "https://github.com/megawac",
      "followers_url": "https://api.github.com/users/megawac/followers",
      "following_url": "https://api.github.com/users/megawac/following{/other_user}",
      "gists_url": "https://api.github.com/users/megawac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/megawac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/megawac/subscriptions",
      "organizations_url": "https://api.github.com/users/megawac/orgs",
      "repos_url": "https://api.github.com/users/megawac/repos",
      "events_url": "https://api.github.com/users/megawac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/megawac/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false
      },
      {
        "id": 40929151,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false
      },
      {
        "id": 178761159,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Regression",
        "name": "Type: Regression",
        "color": "e11d21",
        "default": false
      },
      {
        "id": 725156255,
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2018-02-09T19:47:53Z",
    "updated_at": "2018-02-17T21:43:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug - Regression\r\n\r\n**What is the current behavior?**\r\n\r\nIn react 16 when creating a `<select multiple>` the first child `<option>` is automatically getting marked as selected. In React 16 there does not seem to be a way to specify no `<option>` gets selected by default\r\n\r\nhttps://codesandbox.io/s/moxm2on3z9\r\n\r\n**What is the expected behavior?**\r\n\r\nIn React 15 unless you marked an option to be selected `<option selected>` no options were selected by default.\r\n\r\nhttps://codesandbox.io/s/ll11z5wqzl\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions effected include `react^16.2`, this worked in `react^0.13` and `react^15`. This bug is reproducible in chrome 64 and Firefox 58.\r\n\r\n\r\n-------------------------------\r\n\r\nThe hacky workaround I found to get around the first option getting selected is to inject a `<option style={{display: 'none'}} />` as the first child of the multiselect."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12185",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12185/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12185/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12185/events",
    "html_url": "https://github.com/facebook/react/issues/12185",
    "id": 295496647,
    "number": 12185,
    "title": "Update shouldComponentUpdate docs with advice about closures",
    "user": {
      "login": "thysultan",
      "id": 810601,
      "avatar_url": "https://avatars2.githubusercontent.com/u/810601?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thysultan",
      "html_url": "https://github.com/thysultan",
      "followers_url": "https://api.github.com/users/thysultan/followers",
      "following_url": "https://api.github.com/users/thysultan/following{/other_user}",
      "gists_url": "https://api.github.com/users/thysultan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thysultan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thysultan/subscriptions",
      "organizations_url": "https://api.github.com/users/thysultan/orgs",
      "repos_url": "https://api.github.com/users/thysultan/repos",
      "events_url": "https://api.github.com/users/thysultan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thysultan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "acdlite",
      "id": 3624098,
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "acdlite",
        "id": 3624098,
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 48,
    "created_at": "2018-02-08T12:38:01Z",
    "updated_at": "2018-02-16T16:06:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nPossible bug depending on my understanding of the new context feature.\r\n\r\n**What is the current behavior?**\r\n\r\nThe presence of an `<Indirection>` component with `shouldComponentUpdate:false` is blocking updates to context consumers below it after the first click of \"Toggle Top Data\": [https://codesandbox.io/s/v87rp187r7](https://codesandbox.io/s/v87rp187r7)\r\n\r\n**What is the expected behavior?**\r\n\r\nFor consumers below a shouldComponentUpdate component to continue updating after the first \"Toggle Top Data\" click.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.3.0-alpha.0"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12181",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12181/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12181/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12181/events",
    "html_url": "https://github.com/facebook/react/pull/12181",
    "id": 295381436,
    "number": 12181,
    "title": "Add support for using !important in inline style values",
    "user": {
      "login": "necolas",
      "id": 239676,
      "avatar_url": "https://avatars2.githubusercontent.com/u/239676?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/necolas",
      "html_url": "https://github.com/necolas",
      "followers_url": "https://api.github.com/users/necolas/followers",
      "following_url": "https://api.github.com/users/necolas/following{/other_user}",
      "gists_url": "https://api.github.com/users/necolas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/necolas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/necolas/subscriptions",
      "organizations_url": "https://api.github.com/users/necolas/orgs",
      "repos_url": "https://api.github.com/users/necolas/repos",
      "events_url": "https://api.github.com/users/necolas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/necolas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-02-08T04:25:55Z",
    "updated_at": "2018-02-14T23:57:16Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12181",
      "html_url": "https://github.com/facebook/react/pull/12181",
      "diff_url": "https://github.com/facebook/react/pull/12181.diff",
      "patch_url": "https://github.com/facebook/react/pull/12181.patch"
    },
    "body": "Proposed solution for supporting the `!important` priority for inline styles (#1881). I couldn't write a test for this change; it looks like jsdom doesn't fully support the browser APIs being used. Please let me know if you've got any ideas.\r\n\r\nI used RNW's early-warning [benchmarks](necolas.github.io/react-native-web/benchmarks) to check how this change affects the `inline-styles` timings in Chrome. I couldn't see any difference when styles don't use `!important`. There is a 10-15% increase in time taken when every node in the tree (>600) has at least one style value using `!important` and going through the new code path. Overall it looks like it avoids introducing a performance regression for existing using of `style` while enabling use of `!important` if needed.\r\n\r\n[A micro-optimization](https://github.com/facebook/fbjs/pull/282) PR for `hyphenateStyleName` in `fbjs` helps a little too.\r\n\r\n(This patch is related to #12179, which adds a warning when `!important` is used.)"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12171",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12171/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12171/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12171/events",
    "html_url": "https://github.com/facebook/react/issues/12171",
    "id": 295044019,
    "number": 12171,
    "title": "Remove use of Proxy for events in development",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2018-02-07T08:17:56Z",
    "updated_at": "2018-02-10T16:21:00Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "I think maybe we should revert https://github.com/facebook/react/pull/5947.\r\n\r\nPeople already think `proxyEvent` is some kind of an API: https://github.com/facebook/react/issues/12169.\r\n\r\nIt's also annoying to view in the debugger because none of the properties show up.\r\n\r\nInstead, we could seal the event object or something like that."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12169",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12169/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12169/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12169/events",
    "html_url": "https://github.com/facebook/react/issues/12169",
    "id": 294982759,
    "number": 12169,
    "title": "Prop to pass data to event handlers",
    "user": {
      "login": "shanimal",
      "id": 283957,
      "avatar_url": "https://avatars1.githubusercontent.com/u/283957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shanimal",
      "html_url": "https://github.com/shanimal",
      "followers_url": "https://api.github.com/users/shanimal/followers",
      "following_url": "https://api.github.com/users/shanimal/following{/other_user}",
      "gists_url": "https://api.github.com/users/shanimal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shanimal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shanimal/subscriptions",
      "organizations_url": "https://api.github.com/users/shanimal/orgs",
      "repos_url": "https://api.github.com/users/shanimal/repos",
      "events_url": "https://api.github.com/users/shanimal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shanimal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-02-07T02:15:48Z",
    "updated_at": "2018-03-07T16:35:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "This is a feature request\r\n\r\nMy suggestion is to add a known prop that gets passed through to all handlers as the second parameter. This would eliminate the need for closures, inline binding, inline arrow functions, proxyEvent.target.dataset, etc.\r\n```\r\nhandleClick(proxyEvent, eventData) {\r\n  // do stuff with eventData...\r\n}\r\n<Component eventData={data} onClick={this.handleClick} />\r\n```\r\n\r\nCurrently if we need to pass `data` through an event handler there are several ways...\r\n\r\nCreate a class method that returns a closure:\r\n```\r\nclickHandler(eventData) {\r\n  return (proxyEvent) => {\r\n    // do stuff with eventData\r\n  }\r\n}\r\n<Button onClick={clickHandler(eventData)} />\r\n```\r\n\r\nuse inline bind or arrow function\r\n```\r\nclickHandler(eventData, proxyEvent) {\r\n  // do stuff with eventData\r\n}\r\n<Button onClick={this.clickHandler.bind(this, eventData)} />\r\n<Button onClick={(proxyEvent) => clickHandler(eventData, proxyEvent)} />\r\n```\r\n\r\nAND\r\n\r\nA not so intuitive alternative is to use `proxyEvent.target.dataset`\r\n```\r\nclickHandler(proxyEvent) {\r\n    const eventData = datas\r\n      .find(data => data.get('id') === proxyEvent.target.dataset.button);\r\n    // do stuff with eventData...\r\n}\r\n<Button onClick={clickHandler} data-button={data.get('id')} />\r\n```\r\nIf you pass an object to any `data-`prop it gets converted to a string. My immutable Map becomes `DOMStringMap {button: \"Map { \"id\": \"84280bcc-ab3b-45d5-8882-dc74a17da...` so I have to pass an ID and use it in the handler to find my data.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12166",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12166/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12166/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12166/events",
    "html_url": "https://github.com/facebook/react/pull/12166",
    "id": 294858441,
    "number": 12166,
    "title": "Add warning when hydrating output from renderToStaticMarkup() #11596",
    "user": {
      "login": "cramaechi",
      "id": 24444174,
      "avatar_url": "https://avatars1.githubusercontent.com/u/24444174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cramaechi",
      "html_url": "https://github.com/cramaechi",
      "followers_url": "https://api.github.com/users/cramaechi/followers",
      "following_url": "https://api.github.com/users/cramaechi/following{/other_user}",
      "gists_url": "https://api.github.com/users/cramaechi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cramaechi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cramaechi/subscriptions",
      "organizations_url": "https://api.github.com/users/cramaechi/orgs",
      "repos_url": "https://api.github.com/users/cramaechi/repos",
      "events_url": "https://api.github.com/users/cramaechi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cramaechi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-02-06T18:06:10Z",
    "updated_at": "2018-02-07T23:23:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12166",
      "html_url": "https://github.com/facebook/react/pull/12166",
      "diff_url": "https://github.com/facebook/react/pull/12166.diff",
      "patch_url": "https://github.com/facebook/react/pull/12166.patch"
    },
    "body": "A user accidently generated an SSR output using renderToStaticMarkup()\r\ninstead of renderToString(), which was then hydrated using hydrate().\r\nThis led to a warning, caused by collapsed text nodes. According to the\r\nuser, renderToString() would have added HTML comments between them.\r\n\r\nAs an enhancement, the user is requesting that hydrate() issue a warning\r\nwhen the HTML contents of the node it is hydrating is not rendered by\r\nrenderToString().\r\n\r\nResolves #11596\r\n\r\n**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12163",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12163/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12163/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12163/events",
    "html_url": "https://github.com/facebook/react/pull/12163",
    "id": 294769426,
    "number": 12163,
    "title": "Determine event target in Shadow DOM correctly",
    "user": {
      "login": "marionebl",
      "id": 4248851,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4248851?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marionebl",
      "html_url": "https://github.com/marionebl",
      "followers_url": "https://api.github.com/users/marionebl/followers",
      "following_url": "https://api.github.com/users/marionebl/following{/other_user}",
      "gists_url": "https://api.github.com/users/marionebl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marionebl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marionebl/subscriptions",
      "organizations_url": "https://api.github.com/users/marionebl/orgs",
      "repos_url": "https://api.github.com/users/marionebl/repos",
      "events_url": "https://api.github.com/users/marionebl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marionebl/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-02-06T14:00:41Z",
    "updated_at": "2018-02-09T17:47:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12163",
      "html_url": "https://github.com/facebook/react/pull/12163",
      "diff_url": "https://github.com/facebook/react/pull/12163.diff",
      "patch_url": "https://github.com/facebook/react/pull/12163.patch"
    },
    "body": "## Motivation\r\n\r\nFixes an issue with events not being delegated correctly when originating from an element inside a Shadow DOM root as described in #9242. \r\n\r\n## Included changes\r\n\r\n* Add handling of `Events` that are `.composed` as per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Event/composed)\r\n* Add basic test case for `getEventTarget`\r\n* Add fixture in `fixtures/dom`, as `attachShadow` is not supported in `jsdom` yet"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12152",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12152/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12152/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12152/events",
    "html_url": "https://github.com/facebook/react/issues/12152",
    "id": 294239608,
    "number": 12152,
    "title": "Umbrella: 16.3 and 16.4 releases",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 74359453,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Release",
        "name": "Type: Release",
        "color": "00D8EA",
        "default": false
      },
      {
        "id": 710615342,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
        "name": "Type: Umbrella",
        "color": "5319e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": true,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2018-02-04T22:57:38Z",
    "updated_at": "2018-03-12T21:23:52Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "## 16.3\r\n\r\n- [x] New context API\r\n  - [x] Add context API to test renderer https://github.com/facebook/react/issues/12150\r\n  - [ ] Add context API to shallow renderer (if it even makes sense?)\r\n  - [ ] Mark private fields as private https://github.com/facebook/react/issues/12203\r\n  - [x] Context consumer/provider should bailout if props did not change https://github.com/facebook/react/issues/12218\r\n- [x] `getDerivedStateFromProps`\r\n  - [ ] Looks like the wording of [this warning](https://cdn-images-1.medium.com/max/1600/1*Wv-6Yyg7Wd5gIIBu2IKH7w.png) might need to be updated to reflect it actually *won't work* and not just a recommendation\r\n- [x] `UNSAFE`-prefixed versions of `componentWillMount` and `componentWillUpdate`\r\n- [x] `StrictMode`\r\n  - [x] Fires deprecation warnings for `componentWillMount`, `componentWillUpdate`, `componentWillReceiveProps`.\r\n- [x] `unstable_AsyncMode`\r\n  - [x] Enables async-by-default updates.\r\n  - [x] Also enables strict mode.\r\n- Changes related to async mode:\r\n  - Update scheduling:\r\n    - [x] Interactive updates\r\n      - Async, expires within ~1 second. If a subsequent interactive event is fired before an earlier one has flushed, the earlier one is synchronously flushed before processing the incoming one.\r\n      - Used for any event that is the result of a discrete user interaction. In other words, interactive events are events that cannot be debounced without affecting the terminal state. So a click event is interactive, but a scroll event is not.\r\n    - [x] Controlled updates\r\n      - Sync-ish. Effectively the same as using `unstable_batchedUpdates` in synchronous mode. Updates are flushed before React yields back to the browser.\r\n      - Used for controlled components, where the state of the DOM must always be in sync with React's internal state.\r\n    - [x] Deferred updates\r\n      - Default for updates outside a React lifecycle or event handler: `setTimeout`, promise handlers, etc.\r\n  - [x] `unstable_createRoot`\r\n    - Only useful for pre-rendering via `createBatch`. Not quite ready to make this API stable.\r\n    - Also enables async-mode for all children and the root.\r\n  - [x] `unstable_flushControlled`\r\n    - Only useful for things like Draft that need to wrap event handlers.\r\n  - [ ] Confirm `unstable_deferredUpdates` et al work when nested inside a lifecycle or other priority-changing function.\r\n- [x] Expose persistent mode via `react-reconciler`\r\n  - Use a separate entry point: `react-reconciler/persistent`, PR: https://github.com/facebook/react/pull/12156\r\n- [x] Fix fragment support in test renderer https://github.com/facebook/react/pull/12154\r\n- [x] Revert the deprecation of injecting custom event plugins (@necolas will do that) because we're not ready to commit to providing another migration path for RNW\r\n\r\n## 16.4\r\n- [ ] Deprecate `componentWillMount`, `componentWillUpdate`, and `componentWillReceiveProps`, even outside strict mode.\r\n  - They will keep working, but with a warning. You can add the `UNSAFE_` prefix if you want to keep using them.\r\n- [ ] Deprecate legacy context API (?)\r\n  - Possible migration strategy: implement the legacy API on top of the new API and extract it into a separate package, like `create-react-class` and `prop-types`.\r\n- [ ] Revert deprecation of injecting event plugins\r\n\r\n## A Far Future Major Version\r\n- Remove deprecated APIs\r\n  - [ ] Legacy context API (assuming we deprecate this in 16.x minor)\r\n  - [ ] `componentWillReceiveProps`, `componentWillUpdate`, `componentWillMount`\r\n- [ ] Strict mode everywhere\r\n  - Presumably we'll have added more warnings to strict mode by this point\r\n\r\n## Chose not to include in 16.3, but may include in 16.4 or beyond:\r\n  - New component API. We're holding off on this until we're closer to \"feature complete,\" a phrase which here means \"having implemented async rendering and bytecode compilation.\"\r\n  - Static version of `render` method. It would take lots of effort to migrate, mostly because of class instance methods used as event handlers. The migration effort may not be worth it if we eventually introduce a new component API that replaces classes.\r\n  - Stable version of `unstable_batchedUpdates`. We really should have made this stable a while ago, as it's clearly useful in synchronous mode. However, in asynchronous mode, it's effectively a no-op, so it would be weird to ask everyone to migrate to a new API, only to remove it in an upcoming release.\r\n  - Stable version of `unstable_AsyncMode`. It's probably ready to be used in production, in a limited capacity, but we're holding off until we've tested it more internally. Tentative plan is to make this stable in 16.4.\r\n  - Automatically opt error boundary children into strict mode. Technically, they should be strict mode resilient, but in many apps, this would effectively opt *all* components into strict mode, since the recommendation is to always have an error boundary at the top of the tree."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12141",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12141/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12141/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12141/events",
    "html_url": "https://github.com/facebook/react/issues/12141",
    "id": 294048365,
    "number": 12141,
    "title": "React16 dev memory leak on render with event listeners",
    "user": {
      "login": "frehner",
      "id": 3054066,
      "avatar_url": "https://avatars2.githubusercontent.com/u/3054066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frehner",
      "html_url": "https://github.com/frehner",
      "followers_url": "https://api.github.com/users/frehner/followers",
      "following_url": "https://api.github.com/users/frehner/following{/other_user}",
      "gists_url": "https://api.github.com/users/frehner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frehner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frehner/subscriptions",
      "organizations_url": "https://api.github.com/users/frehner/orgs",
      "repos_url": "https://api.github.com/users/frehner/repos",
      "events_url": "https://api.github.com/users/frehner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frehner/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 620368407,
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2018-02-02T22:54:27Z",
    "updated_at": "2018-02-02T23:40:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nUsing React16 dev, it appears around 8 event listeners are added every time a component is rerendered. They occasionally get garbage collected, but if you're listening to events that happen a lot (scroll, fast typing, etc) it can slow down and kill the tab you're using.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/Luktwrdm/80/\r\nOpen dev tools -> performance, check the \"Memory\" checkbox, and start a performance capture. Then type quickly into the text box for a bit. Stop the performance capture and note the increase in event listeners. Picture included for reference.\r\n![screen shot 2018-02-02 at 3 51 56 pm](https://user-images.githubusercontent.com/3054066/35758393-0fcf8618-0831-11e8-814a-317c82e5d620.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nNo memory leaks\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact16, Chrome, MacOS\r\n\r\nLet me know if there's anything I can do to help clarify. Hopefully I got the right wording/info in here. Thanks!"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12136",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12136/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12136/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12136/events",
    "html_url": "https://github.com/facebook/react/issues/12136",
    "id": 293674295,
    "number": 12136,
    "title": "Children.only conflicts with Children.count",
    "user": {
      "login": "jamesreggio",
      "id": 822205,
      "avatar_url": "https://avatars1.githubusercontent.com/u/822205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesreggio",
      "html_url": "https://github.com/jamesreggio",
      "followers_url": "https://api.github.com/users/jamesreggio/followers",
      "following_url": "https://api.github.com/users/jamesreggio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesreggio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesreggio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesreggio/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesreggio/orgs",
      "repos_url": "https://api.github.com/users/jamesreggio/repos",
      "events_url": "https://api.github.com/users/jamesreggio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesreggio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-02-01T20:34:46Z",
    "updated_at": "2018-03-07T00:48:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n```\r\nconst children = [<div />];\r\n\r\nReact.Children.count(children);\r\n// => 1\r\n\r\nconst child = React.Children.only(children);\r\n// => Error('React.Children.only expected to receive a single React element child.')\r\n```\r\n\r\nRepro in CodeSandbox here: https://codesandbox.io/s/1vonwo4807\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's excepted that `React.Children.only` return the one and only element of the array (and not throw).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0\r\n\r\nI'm not certain if this is the behavior prior to React 16 (pre-Fiber), but Fiber supports and encourages the use of fragments (i.e., arrays of elements); as such, this issue is much more likely to be encountered in React 16 onward.\r\n\r\nFurthermore, the above code just reads like something is wrong.\r\n\r\n_How many children do I have?_ **1.**\r\n_May I have the only child?_ **No, I expected you to only have one child.**\r\n_Um, okay._"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12135",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12135/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12135/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12135/events",
    "html_url": "https://github.com/facebook/react/pull/12135",
    "id": 293667882,
    "number": 12135,
    "title": "Extend input type check in selection capabilities (#12062)",
    "user": {
      "login": "spirosikmd",
      "id": 1057324,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1057324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spirosikmd",
      "html_url": "https://github.com/spirosikmd",
      "followers_url": "https://api.github.com/users/spirosikmd/followers",
      "following_url": "https://api.github.com/users/spirosikmd/following{/other_user}",
      "gists_url": "https://api.github.com/users/spirosikmd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spirosikmd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spirosikmd/subscriptions",
      "organizations_url": "https://api.github.com/users/spirosikmd/orgs",
      "repos_url": "https://api.github.com/users/spirosikmd/repos",
      "events_url": "https://api.github.com/users/spirosikmd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spirosikmd/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "aweary",
      "id": 6886061,
      "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aweary",
      "html_url": "https://github.com/aweary",
      "followers_url": "https://api.github.com/users/aweary/followers",
      "following_url": "https://api.github.com/users/aweary/following{/other_user}",
      "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
      "organizations_url": "https://api.github.com/users/aweary/orgs",
      "repos_url": "https://api.github.com/users/aweary/repos",
      "events_url": "https://api.github.com/users/aweary/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aweary/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "aweary",
        "id": 6886061,
        "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aweary",
        "html_url": "https://github.com/aweary",
        "followers_url": "https://api.github.com/users/aweary/followers",
        "following_url": "https://api.github.com/users/aweary/following{/other_user}",
        "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
        "organizations_url": "https://api.github.com/users/aweary/orgs",
        "repos_url": "https://api.github.com/users/aweary/repos",
        "events_url": "https://api.github.com/users/aweary/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aweary/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-02-01T20:12:40Z",
    "updated_at": "2018-02-15T20:34:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12135",
      "html_url": "https://github.com/facebook/react/pull/12135",
      "diff_url": "https://github.com/facebook/react/pull/12135.diff",
      "patch_url": "https://github.com/facebook/react/pull/12135.patch"
    },
    "body": "When an email input was replaced by a disabled text input on the same\r\nDOM position, an error would occur when trying to `setSelection`. The\r\nreason was that in `getSelectionInformation` the `selectionRange` was\r\nset to `null` as `hasSelectionCapabilities` was returning `false` for\r\nan `email` input type.\r\n\r\n`email` and `tel` input types do have selection capabilities, so in\r\nthat case, `hasSelectionCapabilities` should return `true`.\r\n\r\nFix #12062 "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12115",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12115/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12115/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12115/events",
    "html_url": "https://github.com/facebook/react/pull/12115",
    "id": 292497535,
    "number": 12115,
    "title": "Better identify nodes in rehydration warnings",
    "user": {
      "login": "giles-v",
      "id": 248669,
      "avatar_url": "https://avatars1.githubusercontent.com/u/248669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/giles-v",
      "html_url": "https://github.com/giles-v",
      "followers_url": "https://api.github.com/users/giles-v/followers",
      "following_url": "https://api.github.com/users/giles-v/following{/other_user}",
      "gists_url": "https://api.github.com/users/giles-v/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/giles-v/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/giles-v/subscriptions",
      "organizations_url": "https://api.github.com/users/giles-v/orgs",
      "repos_url": "https://api.github.com/users/giles-v/repos",
      "events_url": "https://api.github.com/users/giles-v/events{/privacy}",
      "received_events_url": "https://api.github.com/users/giles-v/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-01-29T17:41:01Z",
    "updated_at": "2018-02-26T17:24:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12115",
      "html_url": "https://github.com/facebook/react/pull/12115",
      "diff_url": "https://github.com/facebook/react/pull/12115.diff",
      "patch_url": "https://github.com/facebook/react/pull/12115.patch"
    },
    "body": "This is related to https://github.com/facebook/react/issues/10307 and https://github.com/facebook/react/issues/10085. I didn't want to open a new ticket given that there's overlap, but I'm happy to do so if preferred.\r\n\r\nSummary: the warning...\r\n```\r\nDid not expect server HTML to contain a <div> in <div>.\r\n```\r\n... is too vague to debug.\r\n\r\nThis PR changes this to:\r\n```\r\nDid not expect server HTML to contain <div class=\"child\"> in <div class=\"parent\">.\r\n```\r\n\r\nI've not added new tests, because the existing test for the extra `<meta>` element already exposes the new behavior (and that test is updated). "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12088",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12088/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12088/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12088/events",
    "html_url": "https://github.com/facebook/react/pull/12088",
    "id": 291217018,
    "number": 12088,
    "title": "Prevent incorrect options SSR hydrate mismatch, fix #11602",
    "user": {
      "login": "t4deu",
      "id": 1649955,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1649955?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/t4deu",
      "html_url": "https://github.com/t4deu",
      "followers_url": "https://api.github.com/users/t4deu/followers",
      "following_url": "https://api.github.com/users/t4deu/following{/other_user}",
      "gists_url": "https://api.github.com/users/t4deu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/t4deu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/t4deu/subscriptions",
      "organizations_url": "https://api.github.com/users/t4deu/orgs",
      "repos_url": "https://api.github.com/users/t4deu/repos",
      "events_url": "https://api.github.com/users/t4deu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/t4deu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-01-24T13:54:38Z",
    "updated_at": "2018-01-24T19:20:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12088",
      "html_url": "https://github.com/facebook/react/pull/12088",
      "diff_url": "https://github.com/facebook/react/pull/12088.diff",
      "patch_url": "https://github.com/facebook/react/pull/12088.patch"
    },
    "body": "This fix #11602, the warning \"Text content did not match\", when hydrating a select with a value.\r\n\r\nCaused by a regression that overwrites the children nodes of a option when setting the selected option. As you can see [here](https://github.com/facebook/react/blob/v15.6.2/src/renderers/dom/client/wrappers/ReactDOMOption.js#L94), the previous version only overwrites the `selected` prop \r\n\r\n**Before submitting a pull request**, please make sure the following is done:\r\n\r\n- [x] Fork the repository and create your branch from `master`.\r\n- [x] Run `yarn` in the repository root.\r\n- [x] If you've fixed a bug or added code that should be tested, add tests!\r\n- [x] Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n- [x] Run `yarn test-prod` to test in the production environment. It supports the same options as yarn test.\r\n- [x] If you need a debugger, run `yarn debug-test --watch TestName`, open chrome://inspect, and press \"Inspect\".\r\n - [x] Format your code with prettier (`yarn prettier`).\r\n - [x] Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n - [x] Run the Flow typechecks (`yarn flow`).\r\n - [x] If you haven't already, complete the CLA.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12080",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12080/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12080/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12080/events",
    "html_url": "https://github.com/facebook/react/pull/12080",
    "id": 290934738,
    "number": 12080,
    "title": "fix updateWrapper causing re-render textarea, even though their data …",
    "user": {
      "login": "joelbarbosa",
      "id": 1504007,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1504007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joelbarbosa",
      "html_url": "https://github.com/joelbarbosa",
      "followers_url": "https://api.github.com/users/joelbarbosa/followers",
      "following_url": "https://api.github.com/users/joelbarbosa/following{/other_user}",
      "gists_url": "https://api.github.com/users/joelbarbosa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joelbarbosa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joelbarbosa/subscriptions",
      "organizations_url": "https://api.github.com/users/joelbarbosa/orgs",
      "repos_url": "https://api.github.com/users/joelbarbosa/repos",
      "events_url": "https://api.github.com/users/joelbarbosa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joelbarbosa/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-01-23T17:52:41Z",
    "updated_at": "2018-01-23T18:22:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12080",
      "html_url": "https://github.com/facebook/react/pull/12080",
      "diff_url": "https://github.com/facebook/react/pull/12080.diff",
      "patch_url": "https://github.com/facebook/react/pull/12080.patch"
    },
    "body": "Fix: #12072 "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12078",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12078/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12078/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12078/events",
    "html_url": "https://github.com/facebook/react/pull/12078",
    "id": 290829993,
    "number": 12078,
    "title": "fix: React DOM crashes when <option> contains three interpolated valu…",
    "user": {
      "login": "stephenkingsley",
      "id": 13380370,
      "avatar_url": "https://avatars0.githubusercontent.com/u/13380370?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stephenkingsley",
      "html_url": "https://github.com/stephenkingsley",
      "followers_url": "https://api.github.com/users/stephenkingsley/followers",
      "following_url": "https://api.github.com/users/stephenkingsley/following{/other_user}",
      "gists_url": "https://api.github.com/users/stephenkingsley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stephenkingsley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stephenkingsley/subscriptions",
      "organizations_url": "https://api.github.com/users/stephenkingsley/orgs",
      "repos_url": "https://api.github.com/users/stephenkingsley/repos",
      "events_url": "https://api.github.com/users/stephenkingsley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stephenkingsley/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2018-01-23T13:08:21Z",
    "updated_at": "2018-01-29T18:45:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12078",
      "html_url": "https://github.com/facebook/react/pull/12078",
      "diff_url": "https://github.com/facebook/react/pull/12078.diff",
      "patch_url": "https://github.com/facebook/react/pull/12078.patch"
    },
    "body": "fix #11911 \r\n…e if one is a conditional. #11911\r\n\r\n**Before submitting a pull request,** please make sure the following is done:\r\n1. [x] Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. [x] Run `yarn` in the repository root.\r\n3. [x] If you've fixed a bug or added code that should be tested, add tests!\r\n4. [x] Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. [x] Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. [x] If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. [x] Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. [x] Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. [x] Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. [x] If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12073",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12073/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12073/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12073/events",
    "html_url": "https://github.com/facebook/react/issues/12073",
    "id": 290557932,
    "number": 12073,
    "title": "Fabric Todos",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710615342,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
        "name": "Type: Umbrella",
        "color": "5319e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-01-22T17:55:39Z",
    "updated_at": "2018-01-28T13:07:17Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "For my own notes here are some spill-overs from the Fabric renderer commit.\r\n\r\n- [ ] Update currentProps for updates in the commit phase. Needs a host effect to be marked and we need a hook to do host updates in the persistent mode.\r\n- [ ] Actually use currentProps when extracting events in the component tree.\r\n- [ ] Resuming will need to be able to not reuse host nodes used by another thread.\r\n- [ ] Should always clone direct siblings of a changed node, in case they will relayout."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12072",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12072/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12072/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12072/events",
    "html_url": "https://github.com/facebook/react/issues/12072",
    "id": 290555006,
    "number": 12072,
    "title": "All controlled <textarea/> fields re-render on any setState() call even though their data has not changed.",
    "user": {
      "login": "martintasevski",
      "id": 33579371,
      "avatar_url": "https://avatars2.githubusercontent.com/u/33579371?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martintasevski",
      "html_url": "https://github.com/martintasevski",
      "followers_url": "https://api.github.com/users/martintasevski/followers",
      "following_url": "https://api.github.com/users/martintasevski/following{/other_user}",
      "gists_url": "https://api.github.com/users/martintasevski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martintasevski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martintasevski/subscriptions",
      "organizations_url": "https://api.github.com/users/martintasevski/orgs",
      "repos_url": "https://api.github.com/users/martintasevski/repos",
      "events_url": "https://api.github.com/users/martintasevski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martintasevski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false
      },
      {
        "id": 40929151,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false
      },
      {
        "id": 710722093,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2018-01-22T17:45:57Z",
    "updated_at": "2018-02-15T05:15:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReporting a bug.\r\n\r\n**What is the current behavior?**\r\nBasically I have many controlled `<textarea/>` fields in the app that I am currently developing and I normally only want them to re-render when their values have changed through their onChange event, but they re-render every time setState() gets called anywhere within the component or any parent component.\r\n\r\nI even tried creating a custom component which only contains a `<textarea/>` and setting shouldComponentUpdate() to return false but it seems to ignore that command completely. It's weird because in this case the console.log()s in my child component's render() function don't get executed but the field gets re-rendered nonetheless.\r\n\r\nThis issue is causing some major performance problems in my app. I hope someone addresses this issue as fast as possible so I can continue working on my react project. Maybe someone can provide a temporary workaround? Please let me know if there's something I'm missing or if I'm using this field incorrectly.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nI have isolated the problem in a new empty app and you can see the behavior in the following gif:\r\nhttps://gfycat.com/DentalExcitableIndri\r\n\r\nThe code is very simple. You can recreate this problem by creating 2 controlled fields, one `<input/>` and another `<textarea/>`. Then go to your browser, inspect the `<textarea/>` element and input something in the basic input field. The `<textarea/>` will re-render on every new typed letter in the `<input/>` field but not the other way around.\r\n```javascript\r\nimport React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tta1 : \"ta1\",\r\n\t\t\tta2 : \"ta2\",\r\n\t\t\tta3 : \"ta3\",\r\n\t\t\ti1 : \"i1\",\r\n\t\t\ti2 : \"i2\",\r\n\t\t\ti3 : \"i3\"\r\n\t\t};\r\n\t\tthis.handleInputChange = this.handleInputChange.bind(this);\r\n\t}\r\n\r\n\thandleInputChange(event){\r\n\t\tthis.setState({\r\n\t\t\t[event.target.name] : event.target.value\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<header className=\"App-header\">\r\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t\t<h1 className=\"App-title\">Welcome to React</h1>\r\n\t\t\t\t</header>\r\n\t\t\t\t<p className=\"App-intro\">\r\n\t\t\t\t\ttest\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\ttextareas\r\n\t\t\t\t\t\t<textarea value={this.state.ta1} name=\"ta1\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<textarea value={this.state.ta2} name=\"ta2\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<textarea value={this.state.ta3} name=\"ta3\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\tinput fields\r\n\t\t\t\t\t\t<input value={this.state.i1} name=\"i1\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<input value={this.state.i2} name=\"i2\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<input value={this.state.i3} name=\"i3\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe `<textarea/>` field should only re-render when its data is changed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI was able to recreate this problem on React versions 16.2.0 (latest) and 15.6.1. I did not test on other versions so I am not sure if this worked correctly before. I'm using Chrome 62.0.3202.94 64-bit (latest) and Firefox 57.0.4 64-bit (latest) on Ubuntu 14.04."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12064",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12064/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12064/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12064/events",
    "html_url": "https://github.com/facebook/react/pull/12064",
    "id": 290258157,
    "number": 12064,
    "title": "Allow getDefaultProps in dev and production.",
    "user": {
      "login": "sportnak",
      "id": 2974028,
      "avatar_url": "https://avatars1.githubusercontent.com/u/2974028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sportnak",
      "html_url": "https://github.com/sportnak",
      "followers_url": "https://api.github.com/users/sportnak/followers",
      "following_url": "https://api.github.com/users/sportnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/sportnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sportnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sportnak/subscriptions",
      "organizations_url": "https://api.github.com/users/sportnak/orgs",
      "repos_url": "https://api.github.com/users/sportnak/repos",
      "events_url": "https://api.github.com/users/sportnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sportnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-01-21T09:07:10Z",
    "updated_at": "2018-01-29T05:44:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12064",
      "html_url": "https://github.com/facebook/react/pull/12064",
      "diff_url": "https://github.com/facebook/react/pull/12064.diff",
      "patch_url": "https://github.com/facebook/react/pull/12064.patch"
    },
    "body": "This should resolve [#9999](https://github.com/facebook/react/issues/9999)\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12063",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12063/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12063/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12063/events",
    "html_url": "https://github.com/facebook/react/pull/12063",
    "id": 290238331,
    "number": 12063,
    "title": "DOM diff and component stack in SSR hydrate mismatch warnings (#10085)",
    "user": {
      "login": "sompylasar",
      "id": 498274,
      "avatar_url": "https://avatars2.githubusercontent.com/u/498274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sompylasar",
      "html_url": "https://github.com/sompylasar",
      "followers_url": "https://api.github.com/users/sompylasar/followers",
      "following_url": "https://api.github.com/users/sompylasar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sompylasar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sompylasar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sompylasar/subscriptions",
      "organizations_url": "https://api.github.com/users/sompylasar/orgs",
      "repos_url": "https://api.github.com/users/sompylasar/repos",
      "events_url": "https://api.github.com/users/sompylasar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sompylasar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2018-01-21T01:26:08Z",
    "updated_at": "2018-03-02T08:55:56Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12063",
      "html_url": "https://github.com/facebook/react/pull/12063",
      "diff_url": "https://github.com/facebook/react/pull/12063.diff",
      "patch_url": "https://github.com/facebook/react/pull/12063.patch"
    },
    "body": "Renders DOM attributes in the tags mentioned in the warnings. Borrows the idea and partially implementation of `getNodeSignature` from @giles-v https://github.com/facebook/react/pull/12115\r\n\r\nRenders DOM diff and component stack showing visually the location where the hydration failed. Example warning with a diff (see [the tests](https://github.com/facebook/react/pull/12063/commits/fb4bbdeea32838a73d30b268dc793201ffa70a0e#diff-1ee0c467f9deb87ae13e737c58c4ac34) for more warning examples):\r\n```\r\nWarning: Expected server HTML to contain a matching <div>{['children ', …]}</div> in <div>nested<!-- --> <p>children <b>text</b></p></div>.\r\n  <div>\r\n    {'nested'}\r\n    {' '}\r\n    <p>children <b>text</b></p>\r\n+   <div>{['children ', …]}</div>\r\n  </div>\r\n    in div (at SSRMismatchTest.js:280)\r\n    in div (at SSRMismatchTest.js:275)\r\n    in div (at SSRMismatchTest.js:308)\r\n    in SSRMismatchTest (at App.js:14)\r\n    in div (at App.js:11)\r\n    in body (at Chrome.js:17)\r\n    in html (at Chrome.js:9)\r\n    in Chrome (at App.js:10)\r\n    in App (at index.js:8)\r\n```\r\n\r\nRequires changes to ReactFiberReconciler interface functions that handle hydration errors to distinguish insertion from replacement and show insertion as one added line in the diff; show replacement as one removed, one added line, at correct position among the parentInstance's DOM children:\r\n- add `index` (use `fiber.index`) to point at which child node the insertion or replacement occurs;\r\n- add `isReplaced` to distinguish insertion from replacement.\r\n\r\nExtends the proof-of-concept at commit 6c425e7b90cd61f1124c566b26fa2a5d00261b1b\r\n\r\n![react-ssr-warning-diff](https://user-images.githubusercontent.com/498274/36652198-11bb46fe-1a62-11e8-9fa2-a612827d1463.gif)\r\n\r\n------\r\n\r\n<details><summary>Previous revisions</summary>\r\n\r\n* Added textual component stack to the hydrate mismatch warnings\r\n* Added DOM hydrate mismatch test cases to fixtures/ssr\r\n\r\nExample warning:\r\n```\r\nWarning: Expected server HTML to contain a matching <p> in <div>.\r\n    in p (at SSRMismatchTest.js:40)\r\n    in div (at SSRMismatchTest.js:39)\r\n    in div (at SSRMismatchTest.js:46)\r\n    in SSRMismatchTest (at App.js:14)\r\n    in div (at App.js:11)\r\n    in body (at Chrome.js:17)\r\n    in html (at Chrome.js:9)\r\n    in Chrome (at App.js:10)\r\n    in App (at index.js:8)\r\n```\r\n\r\n![react-ssr-mismatch](https://user-images.githubusercontent.com/498274/35189753-a3e6eefc-fe06-11e7-9a15-216bcf4a6e83.gif)\r\n\r\n</details>\r\n\r\n------\r\n\r\nFixes https://github.com/facebook/react/issues/10085"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12062",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12062/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12062/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12062/events",
    "html_url": "https://github.com/facebook/react/issues/12062",
    "id": 290207502,
    "number": 12062,
    "title": "Problem when input type changes from email to text",
    "user": {
      "login": "adrianimboden",
      "id": 2713705,
      "avatar_url": "https://avatars1.githubusercontent.com/u/2713705?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adrianimboden",
      "html_url": "https://github.com/adrianimboden",
      "followers_url": "https://api.github.com/users/adrianimboden/followers",
      "following_url": "https://api.github.com/users/adrianimboden/following{/other_user}",
      "gists_url": "https://api.github.com/users/adrianimboden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adrianimboden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adrianimboden/subscriptions",
      "organizations_url": "https://api.github.com/users/adrianimboden/orgs",
      "repos_url": "https://api.github.com/users/adrianimboden/repos",
      "events_url": "https://api.github.com/users/adrianimboden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adrianimboden/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false
      },
      {
        "id": 40929151,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2018-01-20T17:17:02Z",
    "updated_at": "2018-02-01T13:16:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen an input field changes from \"email\" to \"text\", an exception TypeError will be thrown from setSelection.\r\n![Screenshot](https://raw.githubusercontent.com/adrianimboden/react-bug-reproduction/master/screenshot.png)\r\n\r\n**Reproduction**\r\nSee here: https://github.com/adrianimboden/react-bug-reproduction\r\n\r\n**What is the expected behavior?**\r\nIt should not crash because of an uncaught exception\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nmaster (https://github.com/facebook/react/commit/4ca7855ca062d5d7dfca83c86acf46731e1e57ef)\r\nFirefox\r\n\r\nThis would be my proposed change to fix the issue: https://github.com/adrianimboden/react/commit/db923b8c3c1cb23ad9fb150c160ce56f39dd3cae"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12059",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12059/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12059/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12059/events",
    "html_url": "https://github.com/facebook/react/pull/12059",
    "id": 290157690,
    "number": 12059,
    "title": "Improve display of filenames in component stack",
    "user": {
      "login": "billyjanitsch",
      "id": 1158733,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1158733?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/billyjanitsch",
      "html_url": "https://github.com/billyjanitsch",
      "followers_url": "https://api.github.com/users/billyjanitsch/followers",
      "following_url": "https://api.github.com/users/billyjanitsch/following{/other_user}",
      "gists_url": "https://api.github.com/users/billyjanitsch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/billyjanitsch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/billyjanitsch/subscriptions",
      "organizations_url": "https://api.github.com/users/billyjanitsch/orgs",
      "repos_url": "https://api.github.com/users/billyjanitsch/repos",
      "events_url": "https://api.github.com/users/billyjanitsch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/billyjanitsch/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2018-01-20T02:32:46Z",
    "updated_at": "2018-03-13T12:56:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/12059",
      "html_url": "https://github.com/facebook/react/pull/12059",
      "diff_url": "https://github.com/facebook/react/pull/12059.diff",
      "patch_url": "https://github.com/facebook/react/pull/12059.patch"
    },
    "body": "Fixes #12058, fixes #11519, and supercedes #11523.\r\n\r\nFWIW, as a user, I really like the idea of only stripping the common head, but I understand that you want to start simple. :)\r\n\r\nRelying on CI to run the test suite for now -- I tried to install Yarn but it clobbered my fnm installation. 😢"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12058",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12058/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12058/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12058/events",
    "html_url": "https://github.com/facebook/react/issues/12058",
    "id": 290146804,
    "number": 12058,
    "title": "__source makes component stack less useful",
    "user": {
      "login": "billyjanitsch",
      "id": 1158733,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1158733?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/billyjanitsch",
      "html_url": "https://github.com/billyjanitsch",
      "followers_url": "https://api.github.com/users/billyjanitsch/followers",
      "following_url": "https://api.github.com/users/billyjanitsch/following{/other_user}",
      "gists_url": "https://api.github.com/users/billyjanitsch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/billyjanitsch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/billyjanitsch/subscriptions",
      "organizations_url": "https://api.github.com/users/billyjanitsch/orgs",
      "repos_url": "https://api.github.com/users/billyjanitsch/repos",
      "events_url": "https://api.github.com/users/billyjanitsch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/billyjanitsch/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-01-20T00:32:03Z",
    "updated_at": "2018-01-20T13:11:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSomewhere in between.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I enable `babel-plugin-transform-react-jsx-source` to automatically add a `__source` prop to every component in development, the component stack displayed for certain React warnings changes from displaying the (inferred) name of the rendering component to displaying the filename and line number of the occurrence.\r\n\r\nReact also has access to the file path, but [it is stripped](https://github.com/facebook/react/blob/30dac4e78de02fb427ee82013160ae875128d7a2/packages/shared/describeComponentFrame.js#L20) and only the filename is included. This seems to be based on the assumption that the name of a file always maps exactly to the name of the component it exports. In practice, many people place components in `ComponentName/index.js`, so `__source` currently makes the stack _less_ useful.\r\n\r\nFor example, compare:\r\n```\r\n    in DownloadDropdown (created by Foo)\r\n    in Foo (created by Bar)\r\n    in div (created by Bar)\r\n    in div (created by Bar)\r\n    in div (created by Section)\r\n    in section (created by Section)\r\n    in Section (created by Bar)\r\n    in div (created by App)\r\n    in main (created by App)\r\n    ...\r\n```\r\nto:\r\n```\r\n    in DownloadDropdown (at index.js:53)\r\n    in Foo (at index.js:183)\r\n    in div (at index.js:182)\r\n    in div (at index.js:175)\r\n    in div (at index.js:29)\r\n    in section (at index.js:28)\r\n    in Section (at index.js:173)\r\n    in div (at index.js:26)\r\n    in main (at index.js:24)\r\n    ...\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like the stack to include the full file path, or at least to include the inferred component name alongside the filename.\r\n\r\nWould you accept a PR for either option?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0. This was introduced in #6771 for 15.2.0."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12051",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12051/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12051/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12051/events",
    "html_url": "https://github.com/facebook/react/issues/12051",
    "id": 289858687,
    "number": 12051,
    "title": "Event Handlers on Fragments",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false
      },
      {
        "id": 739761016,
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false
      },
      {
        "id": 40929153,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2018-01-19T04:20:57Z",
    "updated_at": "2018-02-25T04:51:31Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "body": "The use case is when an abstraction wants to listen to some event bubbling up and intercept the event somehow.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <div onClick={() => props.onAction()}>{props.children}</div>;\r\n}\r\n```\r\n\r\nPerhaps there is some state and context involved too.\r\n\r\nThis works fine today as long as you can wrap it in a `<div />`. However, you can't necessarily always do that. I hear that some of this will be relaxed but conceptually I think the constraints will remain in many environment that you don't want a wrapper element around these.\r\n\r\n```js\r\n<ul>\r\n  <Abstraction onAction={...}>\r\n    <li>A</li>\r\n    <li>B</li>\r\n  </Abstraction>\r\n</ul>\r\n```\r\n\r\n```js\r\n<table>\r\n  <tbody>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n  </tbody>\r\n</table>\r\n```\r\n\r\nIt would be nice to be able to use fragments for this.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <Fragment onClick={() => props.onAction()}>{props.children}</Fragment>;\r\n}\r\n```\r\n\r\nIt is easy to implement with the synthetic event system but I suspect it is doable with other approaches too (including just inserting an element called `<fragment />` in the DOM).\r\n\r\nTo implement this we'd need somewhere to store the \"current\" props. We can use the `stateNode` on fragment fibers to hold that. We also need to schedule commit phase effects whenever the set of event handlers on a fragment changes. In the commit phase we update the stateNode on both Fibers to hold the \"current props\".\r\n\r\nThat way when we bubble up the fiber return pointers, we know that stateNode holds the current set of props and those will be the ones we extract event handlers from."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12048",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12048/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12048/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12048/events",
    "html_url": "https://github.com/facebook/react/issues/12048",
    "id": 289773125,
    "number": 12048,
    "title": "Write blog post showing recommended, async-safe coding patterns",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-01-18T20:58:04Z",
    "updated_at": "2018-01-18T20:58:04Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "Follow up item for PR #12028. Relates to reactjs/rfcs/pull/6.\r\n\r\nShow examples of how to accomplish common tasks in an async-friendly way, using the new component API.\r\n\r\nAlso show examples that illustrate pitfalls (eg `setTimeout` calls to `setState`)."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12039",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12039/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12039/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12039/events",
    "html_url": "https://github.com/facebook/react/issues/12039",
    "id": 289620901,
    "number": 12039,
    "title": "can React support feature like keep-alive in Vue?",
    "user": {
      "login": "zengjialuo",
      "id": 7902897,
      "avatar_url": "https://avatars0.githubusercontent.com/u/7902897?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zengjialuo",
      "html_url": "https://github.com/zengjialuo",
      "followers_url": "https://api.github.com/users/zengjialuo/followers",
      "following_url": "https://api.github.com/users/zengjialuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/zengjialuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zengjialuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zengjialuo/subscriptions",
      "organizations_url": "https://api.github.com/users/zengjialuo/orgs",
      "repos_url": "https://api.github.com/users/zengjialuo/repos",
      "events_url": "https://api.github.com/users/zengjialuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zengjialuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2018-01-18T13:02:31Z",
    "updated_at": "2018-01-26T08:46:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "i found this issue: https://github.com/facebook/react/issues/4770,  and @sophiebits said that React never reuses an instance after it's been unmounted. \r\n\r\ndoes it means that React will never support feature like keep-alive in Vue? or there is other way to maintain component's state?\r\n"
  }
]
